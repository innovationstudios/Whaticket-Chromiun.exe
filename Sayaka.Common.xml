<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sayaka.Common</name>
    </assembly>
    <members>
        <member name="T:Sayaka.Common.ConfigWriter.AppConfigWriter">
            <summary>
                所有参数保存到AppConfig文件
            </summary>
        </member>
        <member name="T:Sayaka.Common.ConfigWriter.FileWriter">
            <summary>
                一个参数保存到一个文件，单个文件最大4GB
            </summary>
        </member>
        <member name="M:Sayaka.Common.ConfigWriter.FileWriter.#ctor(System.String,System.String)">
            <summary>
            </summary>
            <param name="extension">扩展名，默认为.ini</param>
            <param name="rootPath">配置保存路径，默认为程序目录下"程序名Config"目录</param>
        </member>
        <member name="T:Sayaka.Common.ConfigWriter.IConfigWriter">
            <summary>
                配置参数保存接口
            </summary>
        </member>
        <member name="M:Sayaka.Common.ConfigWriter.IConfigWriter.Read(System.String)">
            <summary>
                读取配置，不存在则返回null
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ConfigWriter.IConfigWriter.Write(System.String,System.String)">
            <summary>
                写入配置
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:Sayaka.Common.ConfigWriter.IniWriter">
            <summary>
                所有参数保存到一个ini文件，最大支持2047个字符
            </summary>
        </member>
        <member name="M:Sayaka.Common.ConfigWriter.IniWriter.#ctor(System.String,System.String,System.String)">
            <summary>
            </summary>
            <param name="rootPath">配置保存路径，默认为程序目录</param>
            <param name="iniFileName">Ini文件名，默认为:文件名Config.ini</param>
            <param name="sectionName"></param>
        </member>
        <member name="T:Sayaka.Common.ConfigWriter.RegeditWriter">
            <summary>
                所有参数保存到"计算机\HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Sayaka"下面，最大支持255个字符
            </summary>
        </member>
        <member name="M:Sayaka.Common.ConfigWriter.RegeditWriter.#ctor(System.String)">
            <summary>
            </summary>
            <param name="item">注册表项，默认使用Application.ProductName</param>
        </member>
        <member name="T:Sayaka.Common.ExtensionControl">
            <summary>
                自定义控件或窗口开头绘制类
            </summary>
        </member>
        <member name="P:Sayaka.Common.ExtensionControl.DefaultConfigWriter">
            <summary>
                默认保存参数位置AppConfigWriter
            </summary>
        </member>
        <member name="P:Sayaka.Common.ExtensionControl.AppPath">
            <summary>
                获取程序完整路径并替换为有效文件名
            </summary>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExBindAppSettings(System.Windows.Forms.Control,Sayaka.Common.ConfigWriter.IConfigWriter)">
            <summary>
                绑定单个控件Text、Checked、Value、SelectedIndex到AppSettings，一般放置于窗口构造函数或者Form_Load事件。
            </summary>
            <param name="control"></param>
            <param name="writer"></param>
            <returns>找不到控件或者配置参数返回null</returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExBindAppSettings(System.Windows.Forms.Control,System.String[],Sayaka.Common.ConfigWriter.IConfigWriter)">
            <summary>
                绑定单个控件Text、Checked、Value、SelectedIndex到AppSettings，一般放置于窗口构造函数或者Form_Load事件。
            </summary>
            <param name="control"></param>
            <param name="containPropertiesAdditional"></param>
            <param name="writer"></param>
            <returns>找不到控件或者配置参数返回null</returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExBindAppSettings(System.Windows.Forms.Control,System.String,System.String,System.String,Sayaka.Common.ConfigWriter.IConfigWriter)">
            <summary>
                绑定控件属性到AppSettings，一般放置于窗口构造函数或者Form_Load事件。
                加载配置参数时会触发一次TextChanged事件，可在TextChanged事件里先判断CanFocus属性用于过滤引次触发。
            </summary>
            <param name="control"></param>
            <param name="propertyName">属性如:Text、Checked</param>
            <param name="eventName">触发保存属性值的事件名称，如果TextChanged、CheckedChanged</param>
            <param name="appSettingsKey">AppSettings的Key值，默认不要设置，默认为：父控件名称_控件名称</param>
            <param name="writer">保存在哪里</param>
            <returns>找不到控件或者配置参数返回null</returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.GetControlFullPath(System.Windows.Forms.Control,System.String)">
            <summary>
                获取控件在窗口的完整路径，如：Form1_checkBox1
            </summary>
            <param name="control"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExGetAppSettings(System.Windows.Forms.Control,System.String,System.String,Sayaka.Common.ConfigWriter.IConfigWriter)">
            <summary>
                获取控件属性对应的AppSettings值，找不到控件或者配置参数返回null
            </summary>
            <param name="control"></param>
            <param name="propertyName">属性</param>
            <param name="appSettingsKey">默认为null</param>
            <param name="writer">默认使用AppConfigWriter</param>
            <returns>找不到控件或者配置参数返回null</returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExSetAppSettings(System.Windows.Forms.Control,System.String,System.String,Sayaka.Common.ConfigWriter.IConfigWriter)">
            <summary>
                设置控件属性对应的AppSettings值，找不到控件或者配置参数返回null
            </summary>
            <param name="control"></param>
            <param name="propertyName">属性</param>
            <param name="appSettingsKey">默认为null</param>
            <param name="writer">默认使用AppConfigWriter</param>
            <returns>找不到控件或者配置参数返回null</returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExBindAppSettings(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.String[],Sayaka.Common.ConfigWriter.IConfigWriter)">
            <summary>
                绑定多个控件Text到AppSettings
            </summary>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExBindAppSettingsChildren(System.Windows.Forms.Control,System.Type[],System.String[],System.Boolean,System.Boolean,System.String[],Sayaka.Common.ConfigWriter.IConfigWriter)">
            <summary>
                绑定所有子控件Text到AppSettings
            </summary>
            <param name="parentControl"></param>
            <param name="controlTypeFilters">控件类型筛选，可用typeof(TextBox)或者control.GetType()获取Type，为null则匹配全部</param>
            <param name="controlNameFilters">控件名称筛选，模糊匹配，为null则匹配全部</param>
            <param name="skipDisabled">是否跳过Disabled控件</param>
            <param name="skipReadOnly">是否跳过ReadOnly控件</param>
            <param name="containPropertiesAdditional"></param>
            <param name="writer"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExRoundRectangle(System.Windows.Forms.Control,System.Int32,System.Double,System.Boolean)">
            <summary>
                绘制圆角控件或圆角窗口
            </summary>
            <param name="control">控件或窗口</param>
            <param name="cornerWidth">圆角宽度</param>
            <param name="tension">圆角弯曲的程度。介于 0 到 1 之间的一个值，0 表示最锐拐角，1 表示最平滑弯曲。</param>
            <param name="border"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExEllipse(System.Windows.Forms.Control,System.Boolean)">
            <summary>
                绘制椭圆控件
            </summary>
            <param name="control"></param>
            <param name="border"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExGetChildControls(System.Windows.Forms.Control,System.Type[],System.String[],System.Boolean,System.Boolean)">
            <summary>
                获取所有子控件
            </summary>
            <param name="parentControl">父控件</param>
            <param name="controlTypeFilters">控件类型筛选，可用typeof(TextBox)或者control.GetType()获取Type，为null则匹配全部</param>
            <param name="controlNameFilters">控件名称筛选，模糊匹配，为null则匹配全部</param>
            <param name="skipDisabled">是否跳过Disabled控件</param>
            <param name="skipReadOnly">是否跳过ReadOnly控件</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.GetChildrenControls(System.Windows.Forms.Control)">
            <summary>
                获取所有子控件
            </summary>
            <param name="parentControl"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExBindMouseDoubleClick(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.Windows.Forms.MouseEventHandler)">
            <summary>
                绑定多个控件的MouseDoubleClick事件
            </summary>
            <param name="controls"></param>
            <param name="mouseDoubleClick"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExBindMouseClick(System.Collections.Generic.IEnumerable{System.Windows.Forms.Control},System.Windows.Forms.MouseEventHandler)">
            <summary>
                绑定多个控件的MouseClick事件
            </summary>
            <param name="controls"></param>
            <param name="mouseClick"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.AddButton(System.Windows.Forms.TextBox,System.Int32,System.String)">
            <summary>
                在右侧添加按钮
            </summary>
            <param name="textBox"></param>
            <param name="width"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExAddFolderBrowserDialogButton(System.Windows.Forms.TextBox,System.String,System.Int32,System.String)">
            <summary>
                在右侧添加浏览文件夹按钮，并保存数据到AppSettings
            </summary>
            <param name="textBox"></param>
            <param name="description"></param>
            <param name="buttonWidth"></param>
            <param name="buttonText"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExAddOpenFileDialogButton(System.Windows.Forms.TextBox,System.String,System.String,System.Int32,System.String)">
            <summary>
                在右侧添加打开文件按钮，并保存数据到AppSettings
            </summary>
            <param name="textBox"></param>
            <param name="title"></param>
            <param name="filter"></param>
            <param name="buttonWidth"></param>
            <param name="buttonText"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExAttachFolderBrowserDialogButton(System.Windows.Forms.TextBox,System.Windows.Forms.Button,System.String)">
            <summary>
                绑定浏览文件夹按钮
            </summary>
            <param name="textBox"></param>
            <param name="button"></param>
            <param name="description"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExAttachOpenFileDialogButton(System.Windows.Forms.TextBox,System.Windows.Forms.Button,System.String,System.String)">
            <summary>
                绑定打开文件按钮
            </summary>
            <param name="textBox"></param>
            <param name="button"></param>
            <param name="title"></param>
            <param name="filter"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExAllowDropAndDropDirectory(System.Windows.Forms.TextBox,System.Action{System.String})">
            <summary>
                启用文件夹拖放并绑定事件
            </summary>
            <param name="textBox"></param>
            <param name="doAction">拖放后触发的函数，参数为文件夹名</param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExAllowDropAndDropFile(System.Windows.Forms.TextBox,System.Action{System.String})">
            <summary>
                启用文件拖放并绑定事件
            </summary>
            <param name="textBox"></param>
            <param name="doAction">拖放后触发的函数，参数为文件名</param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExOnlyInputNumber(System.Windows.Forms.TextBox,System.Int32)">
            <summary>
                限制文本框只能输入数字和小数点
            </summary>
            <param name="textBox"></param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExSetHint(System.Windows.Forms.Control,System.String)">
            <summary>
                为控件添加提示文本
            </summary>
            <param name="control"></param>
            <param name="hint">提示文本</param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExGetHint(System.Windows.Forms.Control)">
            <summary>
                获取控件提示文本
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExBindAppSettingsAll(System.Windows.Forms.Control,System.Type[],System.String[],System.Boolean,System.Boolean)">
            <summary>
                绑定所有子控件的Text到AppSettings
            </summary>
            <param name="parentControl"></param>
            <param name="controlTypes">控件类型筛选，可用typeof(TextBox)或者control.GetType()获取Type</param>
            <param name="controlNameFilters">包含的控件名称,模糊筛选</param>
            <param name="skipDisabled">跳过禁用控件</param>
            <param name="skipReadOnly">跳过只读控件</param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExBindMouseDoubleClickAll(System.Windows.Forms.Control,System.Windows.Forms.MouseEventHandler,System.Type[],System.String[],System.Boolean,System.Boolean)">
            <summary>
                绑定所有子控件的MouseDoubleClick事件
            </summary>
            <param name="parentControl"></param>
            <param name="mouseDoubleClick"></param>
            <param name="typeofControls"></param>
            <param name="skipControlNameFilters"></param>
            <param name="skipDisabled"></param>
            <param name="skipReadOnly"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControl.ExBindMouseClickAll(System.Windows.Forms.Control,System.Windows.Forms.MouseEventHandler,System.Type[],System.String[],System.Boolean,System.Boolean)">
            <summary>
                绑定所有子控件的MouseClick事件
            </summary>
            <param name="parentControl"></param>
            <param name="mouseClick"></param>
            <param name="typeofControls"></param>
            <param name="skipControlNameFilters"></param>
            <param name="skipDisabled"></param>
            <param name="skipReadOnly"></param>
        </member>
        <member name="T:Sayaka.Common.ExtensionControlInvoke">
            <summary>
                跨线程访问控件扩展类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeUi(System.Windows.Forms.Form,System.Action)">
            <summary>
                跨线程访问控件，调用示例：this.ExInvokeUi(()=>txtName.Text="Jack");
            </summary>
            <param name="form"></param>
            <param name="action"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExBeginInvokeUi(System.Windows.Forms.Form,System.Action)">
            <summary>
                跨线程异步访问控件，调用示例：this.ExBeginInvokeUi(()=>txtName.Text="Jack");
            </summary>
            <param name="form"></param>
            <param name="action"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeIt``1(``0,System.Action{``0})">
            <summary>
                跨线程访问控件，调用示例：textBox1.ExInvokeIt(it => it.Text = text);
            </summary>
            <typeparam name="TControl"></typeparam>
            <param name="control"></param>
            <param name="action"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeIt``2(``0,System.Func{``0,``1})">
            <summary>
                跨线程访问控件，并返回值，调用示例：textBox1.ExInvokeIt(it => {it.Text = text;return true;});
            </summary>
            <typeparam name="TControl"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="control"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExBeginInvokeIt``1(``0,System.Action{``0})">
            <summary>
                跨线程异步访问控件，调用示例：textBox1.ExBeginInvokeIt(it => it.Text = message);
            </summary>
            <typeparam name="TControl"></typeparam>
            <param name="control"></param>
            <param name="action"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeSetText(System.Windows.Forms.Control,System.String)">
            <summary>
                跨线程设置控件Text
            </summary>
            <param name="control"></param>
            <param name="text"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeGetText(System.Windows.Forms.Control)">
            <summary>
                跨线程获取控件Text
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.SetText(System.Windows.Forms.Control,System.String)">
            <summary>
                跨线程设置控件Text
            </summary>
            <param name="control"></param>
            <param name="text"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.GetText(System.Windows.Forms.Control)">
            <summary>
                跨线程获取控件Text
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeSetEnabled(System.Windows.Forms.Control,System.Boolean)">
            <summary>
                跨线程设置控件Enabled
            </summary>
            <param name="control"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeGetEnabled(System.Windows.Forms.Control)">
            <summary>
                跨线程获取控件Enabled
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.SetEnabled(System.Windows.Forms.Control,System.Boolean)">
            <summary>
                跨线程设置控件Enabled
            </summary>
            <param name="control"></param>
            <param name="enabled"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.GetEnabled(System.Windows.Forms.Control)">
            <summary>
                跨线程获取控件Enabled
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.Enabled(System.Object)">
            <summary>
                启用控件，跨线程
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.Disabled(System.Object)">
            <summary>
                禁用控件，跨线程
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeGetValue``2(``0,System.Func{``0,``1})">
            <summary>
                跨线程根据func获取控件属性值，如：control.ExInvokeGetValue(it => it.Text);
            </summary>
            <param name="control"></param>
            <param name="func">函数，如：it => it.Text</param>
            <typeparam name="TControl">控件类型，如CheckBox</typeparam>
            <typeparam name="TReturn">返回值类型，如：string</typeparam>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeSetValue``1(``0,System.Action{``0})">
            <summary>
                跨线程根据action设置控件属性值，如：control.ExInvokeSetValue(it => it.Text = text);
            </summary>
            <param name="control"></param>
            <param name="action">给控件赋值的函数，如：it => it.Text = text</param>
            <typeparam name="TControl"></typeparam>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeSetChecked(System.Windows.Forms.CheckBox,System.Boolean)">
            <summary>
                跨线程设置CheckBox的Checked状态
            </summary>
            <param name="control"></param>
            <param name="isChecked"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeGetChecked(System.Windows.Forms.CheckBox)">
            <summary>
                跨线程获取CheckBox的Checked状态
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.SetChecked(System.Windows.Forms.CheckBox,System.Boolean)">
            <summary>
                跨线程设置CheckBox的Checked状态
            </summary>
            <param name="control"></param>
            <param name="isChecked"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.GetChecked(System.Windows.Forms.CheckBox)">
            <summary>
                跨线程获取CheckBox的Checked状态
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeInsertItem(System.Windows.Forms.ListBox,System.Int32,System.Object)">
            <summary>
                跨线程在index位置插入项
            </summary>
            <param name="listBox"></param>
            <param name="index"></param>
            <param name="text"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeAddItem(System.Windows.Forms.ListBox,System.Object)">
            <summary>
                跨线程在末尾添加项
            </summary>
            <param name="listBox"></param>
            <param name="text"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeRemoveItemAtIndex(System.Windows.Forms.ListBox,System.Int32)">
            <summary>
                跨线程删除index位置所在项
            </summary>
            <param name="listBox"></param>
            <param name="index"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeRemoveItemByValue(System.Windows.Forms.ListBox,System.Object)">
            <summary>
                跨线程通过value删除项
            </summary>
            <param name="listBox"></param>
            <param name="text"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeGetItemByIndex(System.Windows.Forms.ListBox,System.Int32)">
            <summary>
                跨线程获取指定项的值
            </summary>
            <param name="listBox"></param>
            <param name="index"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeContains(System.Windows.Forms.ListBox,System.Object)">
            <summary>
                跨线程判断指定的项是否在列表中
            </summary>
            <param name="listBox"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeInsertItem(System.Windows.Forms.ComboBox,System.Int32,System.Object)">
            <summary>
                跨线程在index位置插入项
            </summary>
            <param name="comboBox"></param>
            <param name="index"></param>
            <param name="text"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeAddItem(System.Windows.Forms.ComboBox,System.Object)">
            <summary>
                跨线程在末尾添加项
            </summary>
            <param name="comboBox"></param>
            <param name="text"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeRemoveItemAtIndex(System.Windows.Forms.ComboBox,System.Int32)">
            <summary>
                跨线程删除index位置所在项
            </summary>
            <param name="comboBox"></param>
            <param name="index"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeRemoveItemByValue(System.Windows.Forms.ComboBox,System.Object)">
            <summary>
                跨线程通过value删除项
            </summary>
            <param name="comboBox"></param>
            <param name="text"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeGetItemByIndex(System.Windows.Forms.ComboBox,System.Int32)">
            <summary>
                跨线程获取指定项的值
            </summary>
            <param name="comboBox"></param>
            <param name="index"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeContains(System.Windows.Forms.ComboBox,System.Object)">
            <summary>
                跨线程判断指定的项是否在列表中
            </summary>
            <param name="comboBox"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeSetValue(System.Windows.Forms.ProgressBar,System.Int32)">
            <summary>
                跨线程设置ProgressBar当前位置
            </summary>
            <param name="progressBar"></param>
            <param name="value"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeGetValue(System.Windows.Forms.ProgressBar)">
            <summary>
                跨线程获取ProgressBar当前位置
            </summary>
            <param name="progressBar"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeSetMaximumValue(System.Windows.Forms.ProgressBar,System.Int32)">
            <summary>
                跨线程设置ProgressBar最大值
            </summary>
            <param name="progressBar"></param>
            <param name="value"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeSetMinimumValue(System.Windows.Forms.ProgressBar,System.Int32)">
            <summary>
                跨线程设置ProgressBar最小值
            </summary>
            <param name="progressBar"></param>
            <param name="value"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeAddRow(System.Windows.Forms.DataGridView,System.Object[])">
            <summary>
                跨线程DataGridView添加行
            </summary>
            <param name="dataGridView"></param>
            <param name="values"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeInsertRow(System.Windows.Forms.DataGridView,System.Int32,System.Object[])">
            <summary>
                跨线程DataGridView插入行
            </summary>
            <param name="dataGridView"></param>
            <param name="rowIndex"></param>
            <param name="values"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeDeleteRow(System.Windows.Forms.DataGridView,System.Int32)">
            <summary>
                跨线程DataGridView删除行
            </summary>
            <param name="dataGridView"></param>
            <param name="rowIndex"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeGetCellValue(System.Windows.Forms.DataGridView,System.Int32,System.Int32)">
            <summary>
                跨线程DataGridView获取单元格值
            </summary>
            <param name="dataGridView"></param>
            <param name="rowIndex"></param>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeGetCellValue``1(System.Windows.Forms.DataGridView,System.Int32,System.Int32)">
            <summary>
                跨线程DataGridView获取单元格值
            </summary>
            <param name="dataGridView"></param>
            <param name="rowIndex"></param>
            <param name="colIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeGetCellValue(System.Windows.Forms.DataGridView,System.Int32,System.String)">
            <summary>
                跨线程DataGridView获取单元格值
            </summary>
            <param name="dataGridView"></param>
            <param name="rowIndex"></param>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeGetCellValue``1(System.Windows.Forms.DataGridView,System.Int32,System.String)">
            <summary>
                跨线程DataGridView获取单元格值
            </summary>
            <param name="dataGridView"></param>
            <param name="rowIndex"></param>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeSetCellValue(System.Windows.Forms.DataGridView,System.Int32,System.Int32,System.Object,System.Boolean)">
            <summary>
                跨线程DataGridView设置单元格值
            </summary>
            <param name="dataGridView"></param>
            <param name="rowIndex"></param>
            <param name="colIndex"></param>
            <param name="value"></param>
            <param name="focusRow"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExInvokeSetCellValue(System.Windows.Forms.DataGridView,System.Int32,System.String,System.Object,System.Boolean)">
            <summary>
                跨线程DataGridView设置单元格值
            </summary>
            <param name="dataGridView"></param>
            <param name="rowIndex"></param>
            <param name="colName"></param>
            <param name="value"></param>
            <param name="focusRow"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExUiThreadInvoke(System.Windows.Forms.Control,System.Windows.Forms.MethodInvoker)">
            <summary>
                后台线程刷新前台窗口控件，使用方法：this.ExUiThreadInvoke(()=>Func(p1,p2,p3));
            </summary>
            <param name="control"></param>
            <param name="code">如：()=>Func(p1,p2,p3)或delegete{Func(p1,p2,p3);}</param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlInvoke.ExUiThreadBeginInvoke(System.Windows.Forms.Control,System.Windows.Forms.MethodInvoker)">
            <summary>
                后台线程刷新前台窗口控件，使用方法：this.ExUiThreadBeginInvoke(()=>Func(p1,p2,p3));
            </summary>
            <param name="control"></param>
            <param name="code">如：()=>Func(p1,p2,p3)或delegete{Func(p1,p2,p3);}</param>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlTo.ToInt16(System.Windows.Forms.Control)">
            <summary>
                Text转为Int16
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlTo.ToInt32(System.Windows.Forms.Control)">
            <summary>
                Text转为Int32
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlTo.ToInt64(System.Windows.Forms.Control)">
            <summary>
                Text转为Int64
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlTo.ToUInt16(System.Windows.Forms.Control)">
            <summary>
                Text转为UInt16
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlTo.ToUInt32(System.Windows.Forms.Control)">
            <summary>
                Text转为UInt32
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlTo.ToUInt64(System.Windows.Forms.Control)">
            <summary>
                Text转为UInt64
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlTo.ToDecimal(System.Windows.Forms.Control)">
            <summary>
                Text转为Decimal
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlTo.ToFloat(System.Windows.Forms.Control)">
            <summary>
                Text转为Single
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlTo.ToDouble(System.Windows.Forms.Control)">
            <summary>
                Text转为Double
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionControlTo.ToBoolean(System.Windows.Forms.Control)">
            <summary>
                Text转为Boolean
            </summary>
            <param name="control"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ExtensionDataGridView">
            <summary>
            DataGridView扩展类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ExtensionDataGridView.ExMoveUpCurrentRow(System.Windows.Forms.DataGridView)">
            <summary>
            上移当前行
            </summary>
            <param name="dataGridView"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionDataGridView.ExMoveDownCurrentRow(System.Windows.Forms.DataGridView)">
            <summary>
            下移当前行
            </summary>
            <param name="dataGridView"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionDataGridView.ExCopyCurrentRow(System.Windows.Forms.DataGridView)">
            <summary>
            复制当前行
            </summary>
            <param name="dataGridView"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionDataGridView.ExDeleteCurrentRow(System.Windows.Forms.DataGridView)">
            <summary>
            删除当前行
            </summary>
            <param name="dataGridView"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionDataGridView.ExAddNewRow(System.Windows.Forms.DataGridView)">
            <summary>
            添加新行
            </summary>
            <param name="dataGridView"></param>
        </member>
        <member name="T:Sayaka.Common.ExtensionDictionary">
            <summary>
                Dictionary静态扩展类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ExtensionDictionary.GetValue``1(System.Collections.Generic.Dictionary{System.String,``0},System.String,``0)">
            <summary>
                读取Dictionary的Key对应的Value，找不到Key则返回defaultValue
            </summary>
            <param name="dictionary"></param>
            <param name="key">区分大小写</param>
            <param name="defaultValue"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionDictionary.GetValue(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
                读取Dictionary的Name对应的Value，找不到Name则返回defaultValue
            </summary>
            <param name="nameValueCollection"></param>
            <param name="name">不区分大小写</param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ExtensionException">
            <summary>
                Exception静态扩展类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ExtensionException.GetInnerExceptionDeepest(System.Exception)">
            <summary>
                Exception拓展方法，获取最深级别的InnerException
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ExtensionForm">
            <summary>
                Form扩展方法
            </summary>
        </member>
        <member name="M:Sayaka.Common.ExtensionForm.ExOpenMdiChildForm(System.Windows.Forms.Form,System.Windows.Forms.Form,System.Boolean)">
            <summary>
                打开MdiChild窗口
            </summary>
            <param name="parentForm">父窗口</param>
            <param name="childForm">子窗口</param>
            <param name="closeOtherChildForm">关闭其他子窗口</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionForm.ExOpenFormWithMark(System.Windows.Forms.Form,System.Windows.Forms.Form)">
            <summary>
                打开带黑色背景的置顶全屏窗口
            </summary>
            <param name="parentForm"></param>
            <param name="childForm"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionForm.ExRunOnSystemStart(System.Windows.Forms.Form,System.Boolean)">
            <summary>
                设置是否开机启动
            </summary>
            <param name="theForm"></param>
            <param name="isRunOnStart">是否开机启动</param>
        </member>
        <member name="M:Sayaka.Common.ExtensionForm.ExSwitchRunOnSystemStart(System.Windows.Forms.Form)">
            <summary>
            切换开机启动
            </summary>
            <param name="theForm"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionForm.ExIsRunOnSystemStart(System.Windows.Forms.Form)">
            <summary>
                获取是否开机启动
            </summary>
            <param name="theForm"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionForm.ExIsRunFirstTime(System.Windows.Forms.Form)">
            <summary>
                是否第一次运行程序
            </summary>
            <param name="theForm"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionForm.ExFormClosingConfirm(System.Windows.Forms.Form,System.String)">
            <summary>
            添加退出窗口确定
            </summary>
            <param name="form"></param>
            <param name="info"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionForm.ExAddNotifyIcon(System.Windows.Forms.Form,System.String,System.Int32,System.Windows.Forms.ToolTipIcon)">
            <summary>
            添加通知图标，左键点击切换窗口显示，右键点击弹出菜单
            </summary>
            <param name="form"></param>
            <param name="tipText"></param>
            <param name="timeout"></param>
            <param name="tipIcon"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ExtensionImage">
            <summary>
                Image扩展方法
            </summary>
        </member>
        <member name="M:Sayaka.Common.ExtensionImage.ExLockBitmap(System.Drawing.Bitmap)">
            <summary>
            return new LockBitmap(bitmap)
            </summary>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ExtensionImage.ResizeAction">
            <summary>
                缩放动作
            </summary>
        </member>
        <member name="F:Sayaka.Common.ExtensionImage.ResizeAction.Stretch">
            <summary>
                拉伸，不锁定宽高比
            </summary>
        </member>
        <member name="F:Sayaka.Common.ExtensionImage.ResizeAction.Zoom">
            <summary>
                缩放，锁定宽高比
            </summary>
        </member>
        <member name="M:Sayaka.Common.ExtensionImage.ToGray(System.Drawing.Color)">
            <summary>
                转为灰色
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionImage.ExFromWebUrl(System.Drawing.Image,System.String)">
            <summary>
                从网页地址获取Image，不存在则返回null
            </summary>
            <param name="image"></param>
            <param name="url">图片网址，如http://127.0.0.1/pic.jpg</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionImage.ExImageToBytes(System.Drawing.Image)">
            <summary>
                将Image转换为byte[]二进制数据。
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionImage.ExResize(System.Drawing.Image,System.Int32,System.Int32,Sayaka.Common.ExtensionImage.ResizeAction)">
            <summary>
                调整尺寸
            </summary>
            <param name="image"></param>
            <param name="width">宽</param>
            <param name="height">高</param>
            <param name="action">缩放动作</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionImage.ExGetThumbnailImage(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            获取缩略图
            </summary>
            <param name="bitmap"></param>
            <param name="thumbWidth"></param>
            <param name="thumbHeight"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionImage.ExBytesToImage(System.Byte[],System.String)">
            <summary>
                将byte[]二进制数据保存为图片文件。
            </summary>
            <param name="data">二进制数据</param>
            <param name="path">图片保存路径</param>
        </member>
        <member name="M:Sayaka.Common.ExtensionImage.ExImageToBytes(System.String)">
            <summary>
                将图片文件读取为byte[]二进制数据。
            </summary>
            <param name="path">图片读取路径</param>
            <returns>二进制数据</returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionImage.ExBytesToImage(System.Byte[])">
            <summary>
                将byte[]二进制数据转换为Image。
            </summary>
            <param name="data">byte[]</param>
        </member>
        <member name="M:Sayaka.Common.ExtensionImage.ExBytesToImage(System.Byte[],System.Int32,System.Int32)">
            <summary>
                将byte[]二进制数据转换为Image。
            </summary>
            <param name="data">byte[]</param>
            <param name="width">宽，单位像素</param>
            <param name="height">高，单位像素</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionImage.ExBase64ToImage(System.String)">
            <summary>
            Base64转Image
            </summary>
            <param name="base64"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionImage.ExImageToBase64(System.String)">
            <summary>
            Image转Base64
            </summary>
            <param name="imageFile"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ExtensionObject">
            <summary>
                Object扩展
            </summary>
        </member>
        <member name="M:Sayaka.Common.ExtensionObject.ContainProperty(System.Object,System.String)">
            <summary>
                利用反射来判断对象是否包含某个属性
            </summary>
            <param name="instance">object</param>
            <param name="propertyName">需要判断的属性</param>
            <returns>是否包含</returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionObject.GetPropertyValue(System.Object,System.String)">
            <summary>
                获取类中的属性值
            </summary>
            <param name="propertyName"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionObject.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
                设置类中的属性值
            </summary>
            <param name="propertyName"></param>
            <param name="instance"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionObject.GetPropertyList``1(``0)">
            <summary>
                获取类中的属性
            </summary>
            <returns>所有属性名称</returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionObject.GetEventNameList``1(``0)">
            <summary>
                获取类的事件
            </summary>
            <param name="control"></param>
            <typeparam name="TControl"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionObject.GetFieldList``1(``0)">
            <summary>
                获取类中的字段
            </summary>
            <returns>所有字段名称</returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionObject.RemoveEvent(System.Object,System.Collections.Generic.List{System.String})">
            <summary>
                清空控件所有事件的处理方法.
                默认过滤掉 "Disposed"
            </summary>
            <param name="control"></param>
            <param name="filterEventNameList">需要跳过的事件,事件名包含即可,不区分大小写</param>
        </member>
        <member name="M:Sayaka.Common.ExtensionObject.RemoveEvent(System.Object,System.String)">
            <summary>
                清空控件指定事件下的事件处理方法
            </summary>
            <param name="control"></param>
            <param name="eventName"></param>
        </member>
        <member name="M:Sayaka.Common.ExtensionObject.TriggerEvent(System.Object,System.String,System.Object)">
            <summary>
                手动触发控件的指定事件
            </summary>
            <param name="control"></param>
            <param name="eventName"></param>
            <param name="e">事件参数,一般第一个参数sender默认为控件,所以就省略了,只需要传第二个参数</param>
        </member>
        <member name="M:Sayaka.Common.ExtensionObject.GetEventInvocationList(System.Object,System.String)">
            <summary>
                获取指定事件的委托
            </summary>
            <param name="control"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionObject.ContainEvent(System.Object,System.String)">
            <summary>
                是否包含指定事件
            </summary>
            <param name="control"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ExtensionObject.AddEvent(System.Object,System.String,System.EventHandler)">
            <summary>
                事件绑定EventHandler
            </summary>
            <param name="control"></param>
            <param name="eventName"></param>
            <param name="eventHandler"></param>
        </member>
        <member name="T:Sayaka.Common.FormConnConfig">
            <summary>
                数据库连接参数设置窗口
            </summary>
        </member>
        <member name="M:Sayaka.Common.FormConnConfig.#ctor">
            <summary>
                构造函数
            </summary>
        </member>
        <member name="M:Sayaka.Common.FormConnConfig.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                构造函数
            </summary>
            <param name="server"></param>
            <param name="database"></param>
            <param name="userid"></param>
            <param name="password"></param>
        </member>
        <member name="P:Sayaka.Common.FormConnConfig.ConnectionString2005">
            <summary>
                获取SQL2005连接字符串
            </summary>
        </member>
        <member name="P:Sayaka.Common.FormConnConfig.ConnectionString2000">
            <summary>
                获取SQL2000连接字符串
            </summary>
        </member>
        <member name="P:Sayaka.Common.FormConnConfig.Server">
            <summary>
                服务器IP地址
            </summary>
        </member>
        <member name="P:Sayaka.Common.FormConnConfig.Database">
            <summary>
                数据库名称
            </summary>
        </member>
        <member name="P:Sayaka.Common.FormConnConfig.Userid">
            <summary>
                用户名
            </summary>
        </member>
        <member name="P:Sayaka.Common.FormConnConfig.Password">
            <summary>
                密码
            </summary>
        </member>
        <member name="P:Sayaka.Common.FormConnConfig.EnableServer">
            <summary>
                服务器IP地址文本框是否可用
            </summary>
        </member>
        <member name="P:Sayaka.Common.FormConnConfig.EnableDatabase">
            <summary>
                数据库文本框是否可用
            </summary>
        </member>
        <member name="P:Sayaka.Common.FormConnConfig.EnableUserid">
            <summary>
                用户名文本框是否可用
            </summary>
        </member>
        <member name="P:Sayaka.Common.FormConnConfig.EnablePassword">
            <summary>
                密码文本框是否可用
            </summary>
        </member>
        <member name="F:Sayaka.Common.FormConnConfig.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sayaka.Common.FormConnConfig.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Sayaka.Common.FormConnConfig.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Sayaka.Common.FormRegisterWithExpireTime">
            <summary>
                注册码认证窗口类，关闭窗口后，调用HelperRegisterWithExpireTime.CheckResult检查注册情况
            </summary>
        </member>
        <member name="M:Sayaka.Common.FormRegisterWithExpireTime.#ctor(Sayaka.Common.HelperRegisterWithExpireTime,System.String,System.String)">
            <summary>
                关闭窗口后，调用HelperRegisterWithExpireTime.CheckResult检查注册情况
            </summary>
            <param name="helper"></param>
            <param name="authCaption"></param>
            <param name="trialText"></param>
        </member>
        <member name="M:Sayaka.Common.FormRegisterWithExpireTime.GetAuthTitle">
            <summary>
            获取授权标题，返回（正式版，XXXX过期）、（试用版，XXXX过期）、空字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:Sayaka.Common.FormRegisterWithExpireTime.Helper">
            <summary>
            注册码辅助类
            </summary>
        </member>
        <member name="P:Sayaka.Common.FormRegisterWithExpireTime.AuthCaption">
            <summary>
            认证窗口标题
            </summary>
        </member>
        <member name="P:Sayaka.Common.FormRegisterWithExpireTime.TrialText">
            <summary>
            试用说明信息
            </summary>
        </member>
        <member name="M:Sayaka.Common.FormRegisterWithExpireTime.CheckRegisterCode">
            <summary>
            检查从配置文件读取的认证码，如果返回值不是“认证码正确”，将弹出提示窗口和认证窗口
            </summary>
            <returns></returns>
        </member>
        <member name="F:Sayaka.Common.FormRegisterWithExpireTime.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Sayaka.Common.FormRegisterWithExpireTime.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Sayaka.Common.FormRegisterWithExpireTime.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperCookieConverter.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="cookieString"></param>
            <param name="domain"></param>
        </member>
        <member name="M:Sayaka.Common.HelperCookieConverter.CookieStringToCookieCollection(System.String,System.String)">
            <summary>
                一个到多个Cookie的字符串添加到CookieCollection集合中【isGood代码】
            </summary>
            <param name="cookie">Cookie的字符串</param>
            <param name="defaultDomain">站点主机部分，可以为带http的网址</param>
        </member>
        <member name="M:Sayaka.Common.HelperCookieConverter.CookieStringToCookieCollection(System.String,System.String,System.Net.CookieCollection)">
            <summary>
                添加到CookieCollection集合部分
            </summary>
            <param name="cookie"></param>
            <param name="defaultDomain"></param>
            <param name="oldCookieCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperCookieConverter.ReplaceByRegex(System.String,System.String,System.String)">
            <summary>
                替换字符【isGood代码】
            </summary>
            <param name="strSource">来源</param>
            <param name="strRegex">表达式</param>
            <param name="strReplace">取代</param>
        </member>
        <member name="T:Sayaka.Common.HelperEmail">
            <summary>
            邮件操作类
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperEmail.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            设置发件邮箱的相关信息
            </summary>
            <param name="fromAddress">发件地址</param>
            <param name="username">SMTP服务登陆账号</param>
            <param name="password">授权码</param>
            <param name="smtpAddress">SMTP 事务的主机的名称或 IP 地址</param>
            <param name="displayName">发件人显示的名称</param>
        </member>
        <member name="M:Sayaka.Common.HelperEmail.AddAttachment(System.String)">
            <summary>
            添加附件
            </summary>
            <param name="filePath">附件路径</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperEmail.AddAttachments(System.String[])">
            <summary>
            添加附件
            </summary>
            <param name="filePaths"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperEmail.SendEmail(System.String[],System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="toAddresses"></param>
            <param name="emailSubject"></param>
            <param name="emailBody"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperEmail.SendEmail(System.String,System.String,System.String)">
            <summary>
            发送邮件
            </summary>
            <param name="toAddress"></param>
            <param name="emailSubject"></param>
            <param name="emailBody"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperEmail.CheckEmailAddress(System.String)">
            <summary>
            验证字符串是否是有效的邮箱地址
            </summary>
            <param name="address">地址字符串</param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.HelperEmailChapedia">
            <summary>
                http://chapedia.net/ 临时邮件帮助类
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperEmailChapedia.#ctor(System.String,System.String)">
            <summary>
                从用户名、密码初始化
            </summary>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:Sayaka.Common.HelperEmailChapedia.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                根据随机数种子字符串，随机生成用户名和密码
            </summary>
            <param name="randomSeekString">随机数种子字符串，取前4位，长度必须大于4位</param>
            <param name="usernameLength">用户名长度</param>
            <param name="passwordLength">密码长度</param>
        </member>
        <member name="M:Sayaka.Common.HelperEmailChapedia.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                根据随机数种子字符串，随机生成用户名和密码
            </summary>
            <param name="randomSeek">随机数种子</param>
            <param name="usernameLength">用户名长度</param>
            <param name="passwordLength">密码长度</param>
        </member>
        <member name="P:Sayaka.Common.HelperEmailChapedia.EmailSuffix">
            <summary>
                邮件后缀
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperEmailChapedia.Username">
            <summary>
                用户名
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperEmailChapedia.Password">
            <summary>
                密码，用于扩展使用，邮件不需要密码
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperEmailChapedia.EmailAddress">
            <summary>
                邮件地址
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperEmailChapedia.GetEmailList(System.String)">
            <summary>
                获取邮件列表
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperEmailChapedia.GetEmailContent(System.String,System.String)">
            <summary>
                获取邮件内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperEmailChapedia.GetEmailList">
            <summary>
                获取邮件列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperEmailChapedia.GetEmailContent(System.String)">
            <summary>
                获取邮件内容
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.HelperEmailMailtemp">
            <summary>
                https://mailtemp.top/ 临时邮件帮助类
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperEmailMailtemp.#ctor(System.String,System.String)">
            <summary>
                从用户名、密码初始化
            </summary>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:Sayaka.Common.HelperEmailMailtemp.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                根据随机数种子字符串，随机生成用户名和密码
            </summary>
            <param name="randomSeekString">随机数种子字符串，取前4位，长度必须大于4位</param>
            <param name="usernameLength">用户名长度</param>
            <param name="passwordLength">密码长度</param>
        </member>
        <member name="M:Sayaka.Common.HelperEmailMailtemp.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
                根据随机数种子字符串，随机生成用户名和密码
            </summary>
            <param name="randomSeek">随机数种子</param>
            <param name="usernameLength">用户名长度</param>
            <param name="passwordLength">密码长度</param>
        </member>
        <member name="P:Sayaka.Common.HelperEmailMailtemp.Username">
            <summary>
                用户名
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperEmailMailtemp.Password">
            <summary>
                密码，用于扩展使用，邮件不需要密码
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperEmailMailtemp.EmailAddress">
            <summary>
                邮件地址
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperEmailMailtemp.GetEmailList(System.String)">
            <summary>
                获取邮件列表
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperEmailMailtemp.GetEmailContent(System.String,System.String)">
            <summary>
                获取邮件内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperEmailMailtemp.GetEmailList">
            <summary>
                获取邮件列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperEmailMailtemp.GetEmailContent(System.String)">
            <summary>
                获取邮件内容
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.HelperEntityToCsvFile`1">
            <summary>
                实体类保存到CSV文件帮助类
            </summary>
            <typeparam name="TEntity">实体类，CsvIgnore特性过滤公共属性</typeparam>
        </member>
        <member name="M:Sayaka.Common.HelperEntityToCsvFile`1.#ctor(System.String)">
            <summary>
                构造函数，TEntity的属性不支持列表，添加CsvIgnore特性过滤公共属性
            </summary>
            <param name="fileName">CSV文件完整路径</param>
        </member>
        <member name="P:Sayaka.Common.HelperEntityToCsvFile`1.HasHeaderRow">
            <summary>
                配置参数。首行是否为标题行，默认为：false
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperEntityToCsvFile`1.ValueDelimiters">
            <summary>
                配置参数。行内值之间的分隔符，默认为：new string[]{","}
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperEntityToCsvFile`1.NewLineDelimiters">
            <summary>
                配置参数。行之间的分隔符，默认为：new[]{"\r\n","\n","\r"}
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperEntityToCsvFile`1.WriteAllEntitiesToFile(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                保存所有实体到CSV文件
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Sayaka.Common.HelperEntityToCsvFile`1.ReadAllEntitiesFromFile">
            <summary>
                从CSV文件读取全部实体。失败返回空列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperEntityToCsvFile`1.SplitCsvLine(System.String,System.String[],System.String[])">
            <summary>
                CSV逗号分隔数据行解析为string[]，一次解析一行，需要引用Microsoft.VisualBasic
            </summary>
            <param name="csvLine"></param>
            <param name="valueSeparator"></param>
            <param name="commentTokens">注释标志，忽略以注释标志开头的行，默认为new []{"//"}</param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.CsvIgnoreAttribute">
            <summary>
                指定不保存到文件的公共属性、公共字段，用于HelperEntityToCsvFile
            </summary>
        </member>
        <member name="T:Sayaka.Common.HelperEntityToExcelFile`1">
            <summary>
                实体类保存到EXCEL文件帮助类
            </summary>
            <typeparam name="TEntity">实体类，ExcelIgnore特性过滤公共属性</typeparam>
        </member>
        <member name="M:Sayaka.Common.HelperEntityToExcelFile`1.#ctor(System.String)">
            <summary>
                构造函数
            </summary>
            <param name="fileName">EXCEL文件完整路径</param>
        </member>
        <member name="M:Sayaka.Common.HelperEntityToExcelFile`1.WriteAllEntitiesToFile(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                保存所有实体到EXCEL文件
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Sayaka.Common.HelperEntityToExcelFile`1.ReadAllEntitiesFromFile">
            <summary>
                从EXCEL文件读取全部实体。失败返回空列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ExcelIgnoreAttribute">
            <summary>
                指定不保存到文件的公共属性、公共字段，用于HelperEntityToExcelFile
            </summary>
        </member>
        <member name="T:Sayaka.Common.HelperEntityToFile`1">
            <summary>
                实体类保存到文件抽象类
            </summary>
            <typeparam name="TEntity">实体类</typeparam>
        </member>
        <member name="M:Sayaka.Common.HelperEntityToFile`1.#ctor(System.String)">
            <summary>初始化 <see cref="T:System.Object" /> 类的新实例。</summary>
        </member>
        <member name="P:Sayaka.Common.HelperEntityToFile`1.FileName">
            <summary>
                文件完整路径
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperEntityToFile`1.WriteEntityToFile(`0)">
            <summary>
                添加单个TEntity到文件。根据TEntity的Equals规则，判断是否存在TEntity，如果存在则更新文件
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Sayaka.Common.HelperEntityToFile`1.WriteAllEntitiesToFile(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                保存多个Entities到文件。根据TEntity的Equals规则，去除重复的Entity
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Sayaka.Common.HelperEntityToFile`1.ReadAllEntitiesFromFile">
            <summary>
                从文件读取全部Entities。失败返回空列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperEntityToFile`1.ReadEntityFromFile(`0)">
            <summary>
                根据TEntity的Equals规则，从文件查找单个Entity。失败返回null
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.HelperEntityToJsonFile`1">
            <summary>
                实体类保存到Json文件帮助类
            </summary>
            <typeparam name="TEntity">实体类，ScriptIgnore特性过滤公共属性</typeparam>
        </member>
        <member name="M:Sayaka.Common.HelperEntityToJsonFile`1.#ctor(System.String)">
            <summary>
                构造函数
            </summary>
            <param name="fileName">JSON文件完整路径</param>
        </member>
        <member name="M:Sayaka.Common.HelperEntityToJsonFile`1.WriteAllEntitiesToFile(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                保存多个Entities到Json文件。根据TEntity的Equals规则，去除重复的Entity
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Sayaka.Common.HelperEntityToJsonFile`1.ReadAllEntitiesFromFile">
            <summary>
                从JSON文件读取全部Entities。失败返回空列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.HelperEntityToXmlFile`1">
            <summary>
                实体类保存到XML文件帮助类
            </summary>
            <typeparam name="TEntity">实体类，XmlIgnore特性过滤公共属性</typeparam>
        </member>
        <member name="M:Sayaka.Common.HelperEntityToXmlFile`1.#ctor(System.String)">
            <summary>
                构造函数
            </summary>
            <param name="fileName">XML文件完整路径</param>
        </member>
        <member name="P:Sayaka.Common.HelperEntityToXmlFile`1.Encoding">
            <summary>
                编码，默认为：Encoding.Default
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperEntityToXmlFile`1.WriteAllEntitiesToFile(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                保存多个Entities到XML文件。根据TEntity的Equals规则，去除重复的Entity
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Sayaka.Common.HelperEntityToXmlFile`1.ReadAllEntitiesFromFile">
            <summary>
                从XML文件读取全部Entities。失败返回空列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.HelperExcel">
            <summary>
                Excel辅助类
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperExcel.#ctor(System.String,System.Boolean)">
            <summary>
                构造函数
            </summary>
            <param name="excelFileName">Excel文件</param>
            <param name="firstRowIsColumnName">第一行是否为列名，true是，false否</param>
        </member>
        <member name="M:Sayaka.Common.HelperExcel.#ctor(System.String)">
            <summary>
                构造函数，首行为列名
            </summary>
            <param name="excelFileName">Excel文件</param>
        </member>
        <member name="M:Sayaka.Common.HelperExcel.GetSheetNameList">
            <summary>
                获取所有Sheet名称列表，包含Name列
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperExcel.GetSheetDataTable(System.String)">
            <summary>
                获取整个WorkSheet数据
            </summary>
            <param name="sheetName">Worksheet名称</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperExcel.GetSheetDataTable(System.String,System.Int32)">
            <summary>
                获取Worksheet数据
            </summary>
            <param name="sheetName">Worksheet名称</param>
            <param name="rowCount">获取的数据行数，0为全部</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperExcel.GetSheetDataTable(System.Int32)">
            <summary>
                获取整个WorkSheet数据
            </summary>
            <param name="sheetIndex">Worksheet序号，从0开始</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperExcel.GetSheetDataTable(System.Int32,System.Int32)">
            <summary>
                获取Worksheet数据
            </summary>
            <param name="sheetIndex">Worksheet序号，从0开始</param>
            <param name="rowCount">获取的数据行数，0为全部</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperExcel.GetSheetRowCount(System.String)">
            <summary>
                返回Sheet行数
            </summary>
            <param name="sheetName">Worksheet名称</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperExcel.GetSheetColumnCount(System.String)">
            <summary>
                返回Sheet列数
            </summary>
            <param name="sheetName">Worksheet名称</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperExcel.GetColumnsList(System.String)">
            <summary>
                返回指定Worksheet的全部列，包含Name列
            </summary>
            <param name="sheetName">Worksheet名称</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperExcel.WriteExcel(System.Data.DataTable,System.String,System.Int32)">
            <summary>
                将DataTable保存为Excel
            </summary>
            <param name="dataTable">数据源</param>
            <param name="excelFile">目的文件</param>
            <param name="rowCount">导出的行数，0为全部</param>
        </member>
        <member name="M:Sayaka.Common.HelperExcel.WriteExcel(System.Data.DataSet,System.String,System.Int32)">
            <summary>
                将DataSet保存为Excel
            </summary>
            <param name="dataSet">数据源</param>
            <param name="excelFile">目的文件</param>
            <param name="rowCount">导出的行数，0为全部</param>
        </member>
        <member name="M:Sayaka.Common.HelperExcel.SetTypeGuessRows(System.Boolean)">
            <summary>
                设置数据类型判断行数
            </summary>
            <param name="isDefault">是否恢复默认,true为恢复默认</param>
        </member>
        <member name="M:Sayaka.Common.HelperGoogleAuthenticator.#ctor(System.String,System.Boolean,System.Int64)">
            <summary>
            初始化验证码生成规则
            </summary>
            <param name="key">秘钥(手机使用Base32码)</param>
            <param name="duration">验证码间隔多久刷新一次（默认30秒和google同步）</param>
        </member>
        <member name="P:Sayaka.Common.HelperGoogleAuthenticator.DURATION_TIME">
            <summary>
            间隔时间
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperGoogleAuthenticator.COUNTER">
            <summary>
            迭代次数
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperGoogleAuthenticator.SERECT_KEY">
            <summary>
            秘钥
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperGoogleAuthenticator.SERECT_KEY_MOBILE">
            <summary>
            手机端输入的秘钥
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperGoogleAuthenticator.EXPIRE_SECONDS">
            <summary>
            到期秒数
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperGoogleAuthenticator.GetMobilePhoneKey">
            <summary>
            获取手机端秘钥
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperGoogleAuthenticator.GenerateCode">
            <summary>
            生成认证码
            </summary>
            <returns>返回验证码</returns>
        </member>
        <member name="M:Sayaka.Common.HelperGoogleAuthenticator.GenerateHashedCode(System.Byte[],System.Int64,System.Int32)">
            <summary>
            按照次数生成哈希编码
            </summary>
            <param name="key">秘钥</param>
            <param name="iterationNumber">迭代次数</param>
            <param name="digits">生成位数</param>
            <returns>返回验证码</returns>
        </member>
        <member name="T:Sayaka.Common.HelperLimitedTaskRunner">
            <summary>
                多线程封装类，限制线程数
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperLimitedTaskRunner.#ctor(System.Int32)">
            <summary>
                限制线程数的TaskRunner
            </summary>
            <param name="maxTaskCount">最大线程数</param>
        </member>
        <member name="P:Sayaka.Common.HelperLimitedTaskRunner.CurrentTaskCount">
            <summary>
                当前运行中的线程数
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperLimitedTaskRunner.MaxTaskCount">
            <summary>
                最大可运行线程数
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperLimitedTaskRunner.IsStopping">
            <summary>
                是否正在取消任务
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperLimitedTaskRunner.IsStopped">
            <summary>
                是否已终止所有任务
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperLimitedTaskRunner.Dispose">
            <summary>
                释放资源
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperLimitedTaskRunner.Reset(System.Int32)">
            <summary>
                重置状态。必须先停止才能重置
            </summary>
            <param name="maxTaskCount">为0时，使用构造函数初始化的maxTaskCount值</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperLimitedTaskRunner.Stop">
            <summary>
                停止所有线程，不能执行线程。如果需要再次执行线程，必须调用Reset重置状态
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperLimitedTaskRunner.Pause">
            <summary>
                暂停所有线程
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperLimitedTaskRunner.Resume">
            <summary>
                继续执行线程
            </summary>
        </member>
        <member name="E:Sayaka.Common.HelperLimitedTaskRunner.ThrowException">
            <summary>
                捕获异常
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperLimitedTaskRunner.Run(System.Action{System.Object},System.Object)">
            <summary>
                运行，阻止当前线程
            </summary>
            <param name="action"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Sayaka.Common.HelperLimitedTaskRunner.RunAsync(System.Action{System.Object},System.Object)">
            <summary>
                运行，使用await不阻止当前线程，使用.wait()阻止当前线程
            </summary>
            <param name="action"></param>
            <param name="obj"></param>
        </member>
        <member name="T:Sayaka.Common.HelperMssqlConnString">
            <summary>
                SqlServer数据库连接字符串辅助类，将字符串连接信息读取和写入在注册表
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperMssqlConnString.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperMssqlConnString.#ctor(System.String)">
            <summary>
            构造函数，从连接字符串初始化，如果连接字符串正确，读取参数到Server,Database,Userid,Password
            </summary>
            <param name="connectionString"></param>
        </member>
        <member name="M:Sayaka.Common.HelperMssqlConnString.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="server"></param>
            <param name="database"></param>
            <param name="userid"></param>
            <param name="password"></param>
        </member>
        <member name="P:Sayaka.Common.HelperMssqlConnString.Server">
            <summary>
                设置和获取SqlServer服务器IP地址
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperMssqlConnString.Database">
            <summary>
                设置和获取SqlServer数据库名称
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperMssqlConnString.Userid">
            <summary>
                设置和获取SqlServer用户名
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperMssqlConnString.Password">
            <summary>
                设置和获取SqlServer密码
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperMssqlConnString.ConnectionString">
            <summary>
                获取SQL2005连接字符串
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperMssqlConnString.ConnectionString2005">
            <summary>
                获取SQL2005连接字符串
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperMssqlConnString.ConnectionString2000">
            <summary>
                获取SQL2000连接字符串
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperMssqlConnString.IsExistInConfig">
            <summary>
                是否存在配置参数
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperMssqlConnString.IsExistInRegedit">
            <summary>
                是否存在配置参数
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperMssqlConnString.Save">
            <summary>
                保存参数到注册表
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperMssqlConnString.SaveConfig">
            <summary>
                保存参数到App.Config
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperMssqlConnString.SaveRegedit">
            <summary>
                保存参数到注册表
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperMssqlConnString.Load">
            <summary>
                从注册表读取参数
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperMssqlConnString.LoadConfig">
            <summary>
                从App.Config读取参数
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperMssqlConnString.LoadRegedit">
            <summary>
                从注册表读取参数
            </summary>
        </member>
        <member name="T:Sayaka.Common.HelperMulticast">
            <summary>
                组播辅助类
            </summary>
        </member>
        <member name="T:Sayaka.Common.HelperMulticast.ListenedEventHandler">
            <summary>
                监听委托
            </summary>
            <param name="sender">发布者</param>
            <param name="e">参数</param>
        </member>
        <member name="M:Sayaka.Common.HelperMulticast.#ctor(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
                构造函数
            </summary>
            <param name="senderAddress">组播地址，如：224.0.0.1</param>
            <param name="senderPort">发送端口</param>
            <param name="listenerPort">监听端口</param>
        </member>
        <member name="M:Sayaka.Common.HelperMulticast.Dispose">
            <summary>
                关闭
            </summary>
        </member>
        <member name="E:Sayaka.Common.HelperMulticast.Listened">
            <summary>
                监听事件
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperMulticast.SendMessage(System.String)">
            <summary>
                发送信息
            </summary>
            <param name="message">发送的信息</param>
        </member>
        <member name="M:Sayaka.Common.HelperMulticast.StartListen">
            <summary>
                开始监听
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperMulticast.StopListen">
            <summary>
                停止监听
            </summary>
            <returns>是否成功停止监听</returns>
        </member>
        <member name="T:Sayaka.Common.HelperMulticast.ListenedEventHandlerArgs">
            <summary>
                监听事件参数
            </summary>
        </member>
        <member name="F:Sayaka.Common.HelperMulticast.ListenedEventHandlerArgs.Address">
            <summary>
                发送者地址
            </summary>
        </member>
        <member name="F:Sayaka.Common.HelperMulticast.ListenedEventHandlerArgs.Message">
            <summary>
                发送信息
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperMulticast.ListenedEventHandlerArgs.#ctor(System.String,System.Net.IPAddress)">
            <summary>
                构造函数
            </summary>
            <param name="message"></param>
            <param name="address"></param>
        </member>
        <member name="T:Sayaka.Common.HelperPrint">
            <summary>
            打印控件
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperPrint.#ctor(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="control">要打印的控件</param>
            <param name="zoom">是否缩放为一页</param>
        </member>
        <member name="M:Sayaka.Common.HelperPrint.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperPrint.SetPageMargins(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置页边距，单位毫米
            </summary>
            <param name="top">上边距，毫米</param>
            <param name="bottom">下边距，毫米</param>
            <param name="left">左边距，毫米</param>
            <param name="right">右边距，毫米</param>
        </member>
        <member name="M:Sayaka.Common.HelperPrint.SetPageSize(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            设置纸张大小，单位毫米
            </summary>
            <param name="name">自定义纸张名字</param>
            <param name="width">纸张宽度，毫米</param>
            <param name="height">纸张高度，毫米</param>
            <param name="landscape">打印方向，是否横向，默认为纵向</param>
        </member>
        <member name="M:Sayaka.Common.HelperPrint.PageSetup">
            <summary>
            页面设置
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperPrint.PrintPreview">
            <summary>
            打印预览
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperPrint.Print">
            <summary>
            直接打印
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperPrint.PrintSetup">
            <summary>
            打印机设置
            </summary>
        </member>
        <member name="T:Sayaka.Common.HelperRandomString">
            <summary>
                随机字符串类，默认不包含标点符号
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRandomString.UppercaseLetterChars">
            <summary>
                大写字母列表，默认为"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRandomString.LowercaseLetterChars">
            <summary>
                小写字母列表，默认为"abcdefghijklmnopqrstuvwxyz"
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRandomString.NumberChars">
            <summary>
                数字列表，默认为"0123456789"
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRandomString.PunctuationChars">
            <summary>
                标点符号列表，默认为""
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperRandomString.GetRandomString(System.Int32,System.Int32)">
            <summary>
                生成随机字符串
            </summary>
            <param name="randomSeed">随机数</param>
            <param name="length">字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRandomString.GetRandomString(System.Int32,System.String)">
            <summary>
                生成随机字符串
            </summary>
            <param name="length">字符串长度</param>
            <param name="randomSeekString">用于生成随机数种子的字符串，长度必须大于4</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRandomString.GetRandomString(System.Int32)">
            <summary>
                生成随机字符串
            </summary>
            <param name="length">字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRandomString.GetRandomString(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                生成随机字符串
            </summary>
            <param name="uppercaseLetterCount">大写字母个数</param>
            <param name="lowercaseLetterCount">小写字母个数</param>
            <param name="numberCount">数字个数</param>
            <param name="punctuationCount">标点符号个数</param>
            <param name="randomSeed">随机数种子</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRandomString.GetRandomString(System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
                生成随机字符串
            </summary>
            <param name="uppercaseLetterCount">大写字母个数</param>
            <param name="lowercaseLetterCount">小写字母个数</param>
            <param name="numberCount">数字个数</param>
            <param name="punctuationCount">标点符号个数</param>
            <param name="randomSeekString">用于生成随机数种子的字符串，长度必须大于4</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRandomString.GetRandomString(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                生成随机字符串
            </summary>
            <param name="uppercaseLetterCount">大写字母个数</param>
            <param name="lowercaseLetterCount">小写字母个数</param>
            <param name="numberCount">数字个数</param>
            <param name="punctuationCount">标点符号个数</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRandomString.GetRandomSeed">
            <summary>
                生成随机数种子
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRandomString.GetRandomSeedFromString(System.String)">
            <summary>
                根据字符串生成随机数种子
            </summary>
            <param name="input">字符串，长度必须大于4</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRandomString.IncludeChar(System.String,System.String)">
            <summary>
                判断字符串是否包含指定字符列表中的字符
            </summary>
            <param name="input">要判断的字符串</param>
            <param name="includeChars">指定字符列表</param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.HelperRegister">
            <summary>
                注册码辅助类
                使用前先用HelperRegister.GenerateRegisterCodeEvent += method;注册生成注册码事件，
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRegister.HardwareType">
            <summary>
            机器码绑定硬件类型
            </summary>
        </member>
        <member name="T:Sayaka.Common.HelperRegister.GenerateRegisterCodeEventHandler">
            <summary>
                生成注册码委托
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperRegister.#ctor(Sayaka.Common.ProviderComputer.HardwareType)">
            <summary>
            构造函数
            </summary>
            <param name="hardwareType"></param>
        </member>
        <member name="P:Sayaka.Common.HelperRegister.ConfigKey">
            <summary>
                app.config appSettings key
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRegister.GenerateRegisterCodeEventIsNull">
            <summary>
            GenerateRegisterCodeEvent是否为null
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperRegister.GetMachineCode">
            <summary>
                机器码，为6位数字，通过硬盘、处理器、网卡等第一个序列号生成
            </summary>
            <returns></returns>
        </member>
        <member name="E:Sayaka.Common.HelperRegister.GenerateRegisterCodeEvent">
            <summary>
                生成注册码事件
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperRegister.GenerateRegisterCode(System.String)">
            <summary>
                生成注册码算法
            </summary>
            <param name="machineCode">机器码</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRegister.CheckRegisterCode(System.String,System.String)">
            <summary>
            指定机器码验证对应的认证码
            </summary>
            <param name="machineCode"></param>
            <param name="registerCode"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRegister.CheckRegisterCode(System.String)">
            <summary>
            本机验证认证码
            </summary>
            <param name="registerCode"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRegister.CheckRegisterCode">
            <summary>
            本机验证从配置文件读取的认证码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRegister.GetRegCodeInConfig">
            <summary>
            从配置文件读取认证码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRegister.SetRegCodeInConfig(System.String)">
            <summary>
            保存认证码到配置文件
            </summary>
            <param name="registerCode"></param>
        </member>
        <member name="T:Sayaka.Common.HelperRegisterWithExpireTime">
            <summary>
                注册码辅助类
            </summary>
        </member>
        <member name="T:Sayaka.Common.HelperRegisterWithExpireTime.GetTimeEventHandler">
            <summary>
                获取服务器时间委托，获取当前时间与注册码内的时间信息进行比较
            </summary>
        </member>
        <member name="T:Sayaka.Common.HelperRegisterWithExpireTime.CheckRegCodeResult">
            <summary>
                检查注册码返回结果枚举类型
            </summary>
        </member>
        <member name="F:Sayaka.Common.HelperRegisterWithExpireTime.CheckRegCodeResult.认证码正确">
            <summary>
                认证码正确
            </summary>
        </member>
        <member name="F:Sayaka.Common.HelperRegisterWithExpireTime.CheckRegCodeResult.认证码错误">
            <summary>
                认证码错误
            </summary>
        </member>
        <member name="F:Sayaka.Common.HelperRegisterWithExpireTime.CheckRegCodeResult.认证码过期">
            <summary>
                认证码过期
            </summary>
        </member>
        <member name="F:Sayaka.Common.HelperRegisterWithExpireTime.CheckRegCodeResult.试用认证码正确">
            <summary>
                试用认证码正确
            </summary>
        </member>
        <member name="F:Sayaka.Common.HelperRegisterWithExpireTime.CheckRegCodeResult.试用认证码过期">
            <summary>
                试用认证码过期
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperRegisterWithExpireTime.#ctor(System.String,Sayaka.Common.HelperRegisterWithExpireTime.GetTimeEventHandler,Sayaka.Common.ProviderComputer.HardwareType)">
            <summary>
                构造函数
            </summary>
            <param name="key">加密密钥</param>
            <param name="getRemoteTimeEvent">获取日期委托</param>
            <param name="hardwareType">硬件类型</param>
            <param name="configType">配置参数保存类型</param>
        </member>
        <member name="P:Sayaka.Common.HelperRegisterWithExpireTime.Key">
            <summary>
                加密密钥
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRegisterWithExpireTime.HardwareType">
            <summary>
                硬件类型
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRegisterWithExpireTime.RegSettingKey">
            <summary>
                注册码 app.config appSettings key 默认值 RegCode
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRegisterWithExpireTime.TimeSettingKey">
            <summary>
                时间戳 app.config appSettings key 默认值 RegType
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRegisterWithExpireTime.IsTrial">
            <summary>
                是否为试用版
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRegisterWithExpireTime.ExpireTime">
            <summary>
                过期时间
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRegisterWithExpireTime.AppName">
            <summary>
                程序名称，不含.exe
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperRegisterWithExpireTime.GetMachineCode">
            <summary>
                机器码，为6位字符，通过硬盘、网卡等生成，取前6位
            </summary>
            <returns></returns>
        </member>
        <member name="E:Sayaka.Common.HelperRegisterWithExpireTime.GetRemoteTimeEvent">
            <summary>
                获取服务器时间委托，获取当前时间与注册码内的时间信息进行比较
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperRegisterWithExpireTime.GenerateRegisterCode(System.String,System.DateTime)">
            <summary>
                生成注册码，绑定机器码，设置过期时间
            </summary>
            <param name="machineCode">机器码</param>
            <param name="expireTime">过期时间</param>
            <returns>认证码</returns>
        </member>
        <member name="M:Sayaka.Common.HelperRegisterWithExpireTime.GenerateRegisterCodeForTrial(System.DateTime)">
            <summary>
                生成通用试用注册码，任何机器都能用
            </summary>
            <param name="expireTime">过期时间</param>
            <returns>认证码</returns>
        </member>
        <member name="M:Sayaka.Common.HelperRegisterWithExpireTime.InitTrialCodeInConfig(System.DateTime)">
            <summary>
                初始化试用码
            </summary>
            <param name="expireTime"></param>
        </member>
        <member name="M:Sayaka.Common.HelperRegisterWithExpireTime.GetCurrentTime">
            <summary>
                获取当前时间并保存到配置文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRegisterWithExpireTime.SetTimeToConfig(System.DateTime)">
            <summary>
                保存时间到配置文件RegType节点
            </summary>
            <param name="dateTime"></param>
        </member>
        <member name="M:Sayaka.Common.HelperRegisterWithExpireTime.GetTimeFromConfig">
            <summary>
                从配置文件读取时间戳，如果出错，则返回DateTime.MaxValue;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRegisterWithExpireTime.CheckRegisterCode(System.String,System.String)">
            <summary>
                检查注册码
            </summary>
            <param name="machineCode">机器码</param>
            <param name="registerCode">注册码</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRegisterWithExpireTime.CheckRegisterCode(System.String)">
            <summary>
                检查本机注册码，输入的注册码
            </summary>
            <param name="registerCode"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRegisterWithExpireTime.CheckRegisterCode">
            <summary>
                检查从配置文件读取的注册码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRegisterWithExpireTime.GetRegCodeInConfig">
            <summary>
                读取RegCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRegisterWithExpireTime.SetRegCodeInConfig(System.String)">
            <summary>
                设置RegCode
            </summary>
            <param name="regCode"></param>
        </member>
        <member name="M:Sayaka.Common.HelperRegisterWithExpireTime.GetTimeCodeInConfig">
            <summary>
                读取时间戳注册码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRegisterWithExpireTime.SetTimeCodeInConfig(System.String)">
            <summary>
                设置时间戳注册码
            </summary>
            <param name="code"></param>
        </member>
        <member name="M:Sayaka.Common.HelperRegisterWithExpireTime.CheckRegistered(System.String,Sayaka.Common.ProviderComputer.HardwareType)">
            <summary>
                是否已注册
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.HelperRequestHeaders">
            <summary>
                请求表头帮助类
            </summary>
        </member>
        <member name="F:Sayaka.Common.HelperRequestHeaders.IgnoreHeaderKeys">
            <summary>
                过滤的Header
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperRequestHeaders.#ctor(System.String)">
            <summary>
                自动过滤accept-encoding、connection、content-length、以:开头的参数(:method等)，Key为小写字母
            </summary>
            <param name="header">从浏览器的请求表头(Request Headers)复制</param>
        </member>
        <member name="P:Sayaka.Common.HelperRequestHeaders.Method">
            <summary>
                Method，默认为：GET
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRequestHeaders.Header">
            <summary>
                Header字符串
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRequestHeaders.Accept">
            <summary>
                Accept，默认为：*/*
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRequestHeaders.ContentType">
            <summary>
                ContentType，默认为：text/html;charset=utf-8
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRequestHeaders.Referer">
            <summary>
                Referer，当前网页
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRequestHeaders.UserAgent">
            <summary>
                UserAgent，默认为：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198
                Safari/537.36
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRequestHeaders.Cookie">
            <summary>
                Cookie
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRequestHeaders.Cookies">
            <summary>
                Cookie字典
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperRequestHeaders.Headers">
            <summary>
                Header字典。自动过滤accept-encoding、content-length、以:开头的参数(:method等)，Key为小写字母
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperRequestHeaders.AddHeader(System.String,System.String)">
            <summary>
                添加或更新Header
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRequestHeaders.RemoveHeader(System.String)">
            <summary>
                删除Header
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperRequestHeaders.SetHttpItemHeader(Sayaka.Common.HttpItem)">
            <summary>
                从浏览器的请求表头内容解析
            </summary>
            <param name="httpItem"></param>
        </member>
        <member name="T:Sayaka.Common.ExtensionHttpItem">
            <summary>
                HttpItem扩展类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ExtensionHttpItem.SetHeader(Sayaka.Common.HttpItem,System.String)">
            <summary>
                从浏览器的请求表头内容解析
            </summary>
            <param name="httpItem"></param>
            <param name="header"></param>
        </member>
        <member name="T:Sayaka.Common.HelperWMI">
            <summary>
                Windows Management Instrumentation，Windows管理规范帮助类
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperWMI.#ctor(System.String)">
            <summary>
                初始化，无密码
            </summary>
            <param name="remoteHost">远程计算机名称或IP地址</param>
        </member>
        <member name="M:Sayaka.Common.HelperWMI.#ctor(System.String,System.String,System.String)">
            <summary>
                初始化，需要用户名和密码，远程计算机必须设置注册表：
                在HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Lsa下设置forceguest为0(dword:00000000)
            </summary>
            <param name="remoteHost">远程计算机名称或IP地址</param>
            <param name="username">用户名，如：Administrator</param>
            <param name="password">密码</param>
        </member>
        <member name="P:Sayaka.Common.HelperWMI.RemoteHost">
            <summary>
                远程计算机名称或IP地址
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperWMI.Username">
            <summary>
                用户名，如：Administrator
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperWMI.Password">
            <summary>
                密码
            </summary>
        </member>
        <member name="M:Sayaka.Common.HelperWMI.Connect">
            <summary>
                验证是否能够连接到远程计算机
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperWMI.GetProcessInfomationList">
            <summary>
                获取远程计算机进程
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperWMI.GetComputerInfomation">
            <summary>
                获取计算机信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperWMI.Reboot">
            <summary>
                重启电脑
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperWMI.Shutdown">
            <summary>
                关闭电脑
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HelperWMI.Win32Shutdown(Sayaka.Common.HelperWMI.Win32ShutdownFlag)">
            <summary>
                WMI中Win32_OperatingSystem的方法Win32Shutdown(flag)
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.HelperWMI.ProcessInfomation">
            <summary>
                进程信息类
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperWMI.ProcessInfomation.ProcessName">
            <summary>
                进程名称
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperWMI.ProcessInfomation.ProcessID">
            <summary>
                进程ID
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperWMI.ProcessInfomation.ExecutablePath">
            <summary>
                可执行文件完整路径
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperWMI.ProcessInfomation.Handle">
            <summary>
                句柄
            </summary>
        </member>
        <member name="T:Sayaka.Common.HelperWMI.ComputerInfomation">
            <summary>
                计算机信息类
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperWMI.ComputerInfomation.OperationSystemName">
            <summary>
                操作系统名称
            </summary>
        </member>
        <member name="P:Sayaka.Common.HelperWMI.ComputerInfomation.ComputerName">
            <summary>
                计算机名称
            </summary>
        </member>
        <member name="T:Sayaka.Common.HelperWMI.Win32ShutdownFlag">
            <summary>
                Win32Shutdown参数
            </summary>
        </member>
        <member name="F:Sayaka.Common.HelperWMI.Win32ShutdownFlag.LogOff">
            <summary>
                注销
            </summary>
        </member>
        <member name="F:Sayaka.Common.HelperWMI.Win32ShutdownFlag.ForceLogOff">
            <summary>
                强制注销
            </summary>
        </member>
        <member name="F:Sayaka.Common.HelperWMI.Win32ShutdownFlag.Shutdown">
            <summary>
                关机
            </summary>
        </member>
        <member name="F:Sayaka.Common.HelperWMI.Win32ShutdownFlag.ForceShutdown">
            <summary>
                强制关机
            </summary>
        </member>
        <member name="F:Sayaka.Common.HelperWMI.Win32ShutdownFlag.Reboot">
            <summary>
                重启
            </summary>
        </member>
        <member name="F:Sayaka.Common.HelperWMI.Win32ShutdownFlag.ForceReboot">
            <summary>
                强制重启
            </summary>
        </member>
        <member name="F:Sayaka.Common.HelperWMI.Win32ShutdownFlag.PowerOff">
            <summary>
                关闭电源
            </summary>
        </member>
        <member name="F:Sayaka.Common.HelperWMI.Win32ShutdownFlag.ForcePowerOff">
            <summary>
                强制关闭电源
            </summary>
        </member>
        <member name="T:Sayaka.Common.HttpHelper">
            <summary>
            Http连接操作帮助类
            </summary>
        </member>
        <member name="M:Sayaka.Common.HttpHelper.GetHtml(Sayaka.Common.HttpItem)">
            <summary>
            根据相传入的数据，得到相应页面数据
            </summary>
            <param name="item">参数类对象</param>
            <returns>返回HttpResult类型</returns>
        </member>
        <member name="M:Sayaka.Common.HttpHelper.GetData(Sayaka.Common.HttpItem,Sayaka.Common.HttpResult)">
            <summary>
            获取数据的并解析的方法
            </summary>
            <param name="item"></param>
            <param name="result"></param>
        </member>
        <member name="M:Sayaka.Common.HttpHelper.SetEncoding(Sayaka.Common.HttpItem,Sayaka.Common.HttpResult,System.Byte[])">
            <summary>
            设置编码
            </summary>
            <param name="item">HttpItem</param>
            <param name="result">HttpResult</param>
            <param name="ResponseByte">byte[]</param>
        </member>
        <member name="M:Sayaka.Common.HttpHelper.GetByte">
            <summary>
            提取网页Byte
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.HttpHelper.SetRequest(Sayaka.Common.HttpItem)">
             <summary>
             为请求准备参数
             </summary>
            <param name="item">参数列表</param>
        </member>
        <member name="M:Sayaka.Common.HttpHelper.SetCer(Sayaka.Common.HttpItem)">
            <summary>
            设置证书
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Sayaka.Common.HttpHelper.SetCerList(Sayaka.Common.HttpItem)">
            <summary>
            设置多个证书
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Sayaka.Common.HttpHelper.SetCookie(Sayaka.Common.HttpItem)">
            <summary>
            设置Cookie
            </summary>
            <param name="item">Http参数</param>
        </member>
        <member name="M:Sayaka.Common.HttpHelper.SetPostData(Sayaka.Common.HttpItem)">
            <summary>
            设置Post数据
            </summary>
            <param name="item">Http参数</param>
        </member>
        <member name="M:Sayaka.Common.HttpHelper.SetProxy(Sayaka.Common.HttpItem)">
            <summary>
            设置代理
            </summary>
            <param name="item">参数对象</param>
        </member>
        <member name="M:Sayaka.Common.HttpHelper.CheckValidationResult(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            回调验证证书问题
            </summary>
            <param name="sender">流对象</param>
            <param name="certificate">证书</param>
            <param name="chain">X509Chain</param>
            <param name="errors">SslPolicyErrors</param>
            <returns>bool</returns>
        </member>
        <member name="M:Sayaka.Common.HttpHelper.BindIPEndPointCallback(System.Net.ServicePoint,System.Net.IPEndPoint,System.Int32)">
            <summary>
            通过设置这个属性，可以在发出连接的时候绑定客户端发出连接所使用的IP地址。 
            </summary>
            <param name="servicePoint"></param>
            <param name="remoteEndPoint"></param>
            <param name="retryCount"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.HttpItem">
            <summary>
            Http请求参考类
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.URL">
            <summary>
            请求URL必须填写
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.Method">
            <summary>
            请求方式默认为GET方式,当为POST方式时必须设置Postdata的值
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.Timeout">
            <summary>
            默认请求超时时间
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.ReadWriteTimeout">
            <summary>
            默认写入Post数据超时间
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.Host">
            <summary>
            设置Host的标头信息
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.KeepAlive">
            <summary>
             获取或设置一个值，该值指示是否与 Internet 资源建立持久性连接默认为true。
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.Accept">
            <summary>
            请求标头值 默认为text/html, application/xhtml+xml, */*
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.ContentType">
            <summary>
            请求返回类型默认 text/html
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.UserAgent">
            <summary>
            客户端访问信息默认Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.Encoding">
            <summary>
            返回数据编码默认为NUll,可以自动识别,一般为utf-8,gbk,gb2312
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.PostDataType">
            <summary>
            Post的数据类型
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.Postdata">
            <summary>
            Post请求时要发送的字符串Post数据
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.PostdataByte">
            <summary>
            Post请求时要发送的Byte类型的Post数据
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.CookieCollection">
            <summary>
            Cookie对象集合
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.Cookie">
            <summary>
            请求时的Cookie
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.Referer">
            <summary>
            来源地址，上次访问地址
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.CerPath">
            <summary>
            证书绝对路径
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.WebProxy">
            <summary>
            设置代理对象，不想使用IE默认配置就设置为Null，而且不要设置ProxyIp
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.IsToLower">
            <summary>
            是否设置为全文小写，默认为不转化
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.Date">
            <summary>
              获取或设置要在 HTTP 请求中使用的 Date HTTP 标头值。默认不填写
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.Allowautoredirect">
            <summary>
            支持跳转页面，查询结果将是跳转后的页面，默认是不跳转
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.Connectionlimit">
            <summary>
            最大连接数
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.ProxyUserName">
            <summary>
            代理Proxy 服务器用户名
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.ProxyPwd">
            <summary>
            代理 服务器密码
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.ProxyIp">
            <summary>
            代理 服务IP,如果要使用IE代理就设置为ieproxy
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.ResultType">
            <summary>
            设置返回类型String和Byte
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.Header">
            <summary>
            header对象
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Sayaka.Common.HttpItem.ProtocolVersion" -->
        <member name="P:Sayaka.Common.HttpItem.Expect100Continue">
            <summary>
             获取或设置一个 System.Boolean 值，该值确定是否使用 100-Continue 行为。如果 POST 请求需要 100-Continue 响应，则为 true；否则为 false。默认值为 true。
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.ClentCertificates">
            <summary>
            设置509证书集合
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.PostEncoding">
            <summary>
            设置或获取Post参数编码,默认的为Default编码
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.ResultCookieType">
            <summary>
            Cookie返回类型,默认的是只返回字符串类型
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.ICredentials">
            <summary>
            获取或设置请求的身份验证信息。
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.MaximumAutomaticRedirections">
            <summary>
            设置请求将跟随的重定向的最大数目
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.IfModifiedSince">
            <summary>
            获取和设置IfModifiedSince，默认为当前日期和时间
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpItem.IPEndPoint">
             <summary>
             设置本地的出口ip和端口
             </summary>]
             <example>
            item.IPEndPoint = new IPEndPoint(IPAddress.Parse("192.168.1.1"),80);
             </example>
        </member>
        <member name="P:Sayaka.Common.HttpItem.IsReset">
            <summary>
            是否重置request,response的值，默认不重置，当设置为True时request,response将被设置为Null
            </summary>
        </member>
        <member name="T:Sayaka.Common.HttpResult">
            <summary>
            Http返回参数类
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpResult.Cookie">
            <summary>
            Http请求返回的Cookie
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpResult.CookieCollection">
            <summary>
            Cookie对象集合
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpResult.Html">
            <summary>
            返回的String类型数据 只有ResultType.String时才返回数据，其它情况为空
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpResult.ResultByte">
            <summary>
            返回的Byte数组 只有ResultType.Byte时才返回数据，其它情况为空
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpResult.Header">
            <summary>
            header对象
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpResult.StatusDescription">
            <summary>
            返回状态说明
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpResult.StatusCode">
            <summary>
            返回状态码,默认为OK
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpResult.ResponseUri">
            <summary>
            最后访问的URl
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpResult.RedirectUrl">
            <summary>
            获取重定向的URl
            </summary>
        </member>
        <member name="T:Sayaka.Common.ResultType">
            <summary>
            返回类型
            </summary>
        </member>
        <member name="F:Sayaka.Common.ResultType.String">
            <summary>
            表示只返回字符串 只有Html有数据
            </summary>
        </member>
        <member name="F:Sayaka.Common.ResultType.Byte">
            <summary>
            表示返回字符串和字节流 ResultByte和Html都有数据返回
            </summary>
        </member>
        <member name="T:Sayaka.Common.PostDataType">
            <summary>
            Post的数据格式默认为string
            </summary>
        </member>
        <member name="F:Sayaka.Common.PostDataType.String">
            <summary>
            字符串类型，这时编码Encoding可不设置
            </summary>
        </member>
        <member name="F:Sayaka.Common.PostDataType.Byte">
            <summary>
            Byte类型，需要设置PostdataByte参数的值编码Encoding可设置为空
            </summary>
        </member>
        <member name="F:Sayaka.Common.PostDataType.FilePath">
            <summary>
            传文件，Postdata必须设置为文件的绝对路径，必须设置Encoding的值
            </summary>
        </member>
        <member name="T:Sayaka.Common.ResultCookieType">
            <summary>
            Cookie返回类型
            </summary>
        </member>
        <member name="F:Sayaka.Common.ResultCookieType.String">
            <summary>
            只返回字符串类型的Cookie
            </summary>
        </member>
        <member name="F:Sayaka.Common.ResultCookieType.CookieCollection">
            <summary>
            CookieCollection格式的Cookie集合同时也返回String类型的cookie
            </summary>
        </member>
        <member name="T:Sayaka.Common.IHelperEntityToFile`1">
            <summary>
                实体类保存到文件接口
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="P:Sayaka.Common.IHelperEntityToFile`1.FileName">
            <summary>
                文件完整路径
            </summary>
        </member>
        <member name="M:Sayaka.Common.IHelperEntityToFile`1.WriteEntityToFile(`0)">
            <summary>
                添加单个TEntity到文件。根据TEntity的Equals规则，判断是否存在TEntity，如果存在则更新文件
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Sayaka.Common.IHelperEntityToFile`1.WriteAllEntitiesToFile(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                保存多个Entities到文件。根据TEntity的Equals规则，去除重复的Entity
            </summary>
            <param name="entities"></param>
        </member>
        <member name="M:Sayaka.Common.IHelperEntityToFile`1.ReadAllEntitiesFromFile">
            <summary>
                从文件读取全部Entities
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.IHelperEntityToFile`1.ReadEntityFromFile(`0)">
            <summary>
                根据TEntity的Equals规则，从文件查找单个Entity。失败返回null
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.IRecaptchaApi.GetRecaptchaV3Token(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            </summary>
            <param name="siteKey">
                RecaptchaKey，如：6LeUPckbAAAAAIX0YxfqgiXvD3EOXSeuq0OpO8u_，
                从https://www.recaptcha.net/recaptcha/api.js?render=6LeUPckbAAAAAIX0YxfqgiXvD3EOXSeuq0OpO8u_提取，
            </param>
            <param name="siteReferer">当前页面网址</param>
            <param name="siteAction">action，如：submit，从grecaptcha.execute("100000",{action: "submit"});提取</param>
            <param name="minScore">最小分值,0.0为机器人,1.0为真人，一般为0.3</param>
            <param name="damaKey">打码平台KEY</param>
            <param name="inviteCode">打码平台邀请码</param>
            <returns></returns>
        </member>
        <member name="P:Sayaka.Common.RecaptchaParameter.SiteKey">
            <summary>
                RecaptchaKey，如：6LeUPckbAAAAAIX0YxfqgiXvD3EOXSeuq0OpO8u_，
                从https://www.recaptcha.net/recaptcha/api.js?render=6LeUPckbAAAAAIX0YxfqgiXvD3EOXSeuq0OpO8u_提取，
            </summary>
        </member>
        <member name="P:Sayaka.Common.RecaptchaParameter.SiteReferer">
            <summary>
                当前页面网址
            </summary>
        </member>
        <member name="P:Sayaka.Common.RecaptchaParameter.SiteAction">
            <summary>
                action，如：submit，从grecaptcha.execute("100000",{action: "submit"});提取
            </summary>
        </member>
        <member name="P:Sayaka.Common.RecaptchaParameter.MinScore">
            <summary>
                最小分值,0.0为机器人,1.0为真人，一般为0.3
            </summary>
        </member>
        <member name="P:Sayaka.Common.RecaptchaParameter.DamaKey">
            <summary>
                打码平台KEY
            </summary>
        </member>
        <member name="P:Sayaka.Common.RecaptchaParameter.InviteCode">
            <summary>
                打码平台邀请码
            </summary>
        </member>
        <member name="T:Sayaka.Common.JsonConvert">
            <summary>
                解析JSON，仿Json.Net风格
            </summary>
        </member>
        <member name="M:Sayaka.Common.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
                使用DataContractJsonSerializer
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.JsonConvert.SerializeObject(System.Object)">
            <summary>
                使用DataContractJsonSerializer
            </summary>
            <param name="jsonObject"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.JsonConvert.Deserialize``1(System.String)">
            <summary>
                使用JavaScriptSerializer
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.JsonConvert.Serialize(System.Object)">
            <summary>
                使用JavaScriptSerializer
            </summary>
            <param name="jsonObject"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.LockBitmap">
            <summary>
            LockBitmap
            </summary>
        </member>
        <member name="P:Sayaka.Common.LockBitmap.Pixels">
            <summary>
            像素点
            </summary>
        </member>
        <member name="P:Sayaka.Common.LockBitmap.Depth">
            <summary>
            深度
            </summary>
        </member>
        <member name="P:Sayaka.Common.LockBitmap.Width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="P:Sayaka.Common.LockBitmap.Height">
            <summary>
            高度
            </summary>
        </member>
        <member name="M:Sayaka.Common.LockBitmap.#ctor(System.Drawing.Bitmap)">
            <summary>
            Bitmap内存操作法,初始化后先执行LockBits()，最后执行UnLockBits()
            </summary>
            <param name="bitmap"></param>
        </member>
        <member name="M:Sayaka.Common.LockBitmap.LockBits">
            <summary>
            Lock bitmap data
            </summary>
        </member>
        <member name="M:Sayaka.Common.LockBitmap.UnlockBits">
            <summary>
            Unlock bitmap data
            </summary>
        </member>
        <member name="M:Sayaka.Common.LockBitmap.GetPixel(System.Int32,System.Int32)">
            <summary>
            Get the color of the specified pixel
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.LockBitmap.GetPixelGray(System.Int32,System.Int32)">
            <summary>
            获取像素点灰度
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.LockBitmap.SetPixel(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Set the color of the specified pixel
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="color"></param>
        </member>
        <member name="M:Sayaka.Common.LockBitmap.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:Sayaka.Common.ProviderAssembly">
            <summary>
            获取程序集信息
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderAssembly.GetAssemblyTitle(System.Reflection.Assembly)">
            <summary>
            获取程序集标题。通过Assembly.GetExecutingAssembly()获取当前程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderAssembly.GetAssemblyDescription(System.Reflection.Assembly)">
            <summary>
            获取程序集说明。通过Assembly.GetExecutingAssembly()获取当前程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderAssembly.GetAssemblyCompany(System.Reflection.Assembly)">
            <summary>
            获取程序集公司。通过Assembly.GetExecutingAssembly()获取当前程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderAssembly.GetAssemblyProduct(System.Reflection.Assembly)">
            <summary>
            获取程序集产品。通过Assembly.GetExecutingAssembly()获取当前程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderAssembly.GetAssemblyCopyright(System.Reflection.Assembly)">
            <summary>
            获取程序集版权。通过Assembly.GetExecutingAssembly()获取当前程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderAssembly.GetAssemblyTrademark(System.Reflection.Assembly)">
            <summary>
            获取程序集商标。通过Assembly.GetExecutingAssembly()获取当前程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderAssembly.GetAssemblyVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集版本。通过Assembly.GetExecutingAssembly()获取当前程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderAssembly.GetAssemblyFileVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集商标。通过Assembly.GetExecutingAssembly()获取当前程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderAssembly.GetAssemblyFullTitle(System.Reflection.Assembly)">
            <summary>
            获取程序集标题加版本，如ModelGenerator V1.0.1.0。通过Assembly.GetExecutingAssembly()获取当前程序集
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderBase32Encoder">
            <summary>
            Base32 Encoding / Decoding
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderBase32Encoder.Encode(System.String)">
            <summary>
            base32 encode
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderBase32Encoder.Decode(System.Byte[])">
            <summary>
            base32 decode
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderBase58CheckEncoder">
            <summary>
                Base58Check Encoding / Decoding (Bitcoin-style)
            </summary>
            <remarks>
                See here for more details: https://en.bitcoin.it/wiki/Base58Check_encoding
            </remarks>
        </member>
        <member name="M:Sayaka.Common.ProviderBase58CheckEncoder.EncodeWithChecksum(System.Byte[])">
            <summary>
                Encodes data with a 4-byte checksum
            </summary>
            <param name="data">Data to be encoded</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderBase58CheckEncoder.Encode(System.Byte[])">
            <summary>
                Encodes data in plain Base58, without any checksum.
            </summary>
            <param name="data">The data to be encoded</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderBase58CheckEncoder.DecodeWithCheckSum(System.String)">
            <summary>
                Decodes data in Base58Check format (with 4 byte checksum)
            </summary>
            <param name="data">Data to be decoded</param>
            <returns>Returns decoded data if valid; throws FormatException if invalid</returns>
        </member>
        <member name="M:Sayaka.Common.ProviderBase58CheckEncoder.Decode(System.String)">
            <summary>
                Decodes data in plain Base58, without any checksum.
            </summary>
            <param name="data">Data to be decoded</param>
            <returns>Returns decoded data if valid; throws FormatException if invalid</returns>
        </member>
        <member name="T:Sayaka.Common.ProviderComputer">
            <summary>
                计算机信息
            </summary>
        </member>
        <member name="T:Sayaka.Common.ProviderComputer.HardwareType">
            <summary>
                硬件类型
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderComputer.HardwareType.HardDisk">
            <summary>
                物理硬盘
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderComputer.HardwareType.NetworkAdapter">
            <summary>
                网卡
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderComputer.HardwareType.LogicalDiskInfo">
            <summary>
                逻辑硬盘分区
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderComputer.GetLogicalDiskSerial16">
            <summary>
                获取第一块逻辑分区编号，十六进制
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderComputer.GetLogicalDiskSerial10">
            <summary>
                获取第一块逻辑分区编号，十进制
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderComputer.GetMachineCode16(Sayaka.Common.ProviderComputer.HardwareType)">
            <summary>
                获取机器码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderComputer.GetMachineCode10(Sayaka.Common.ProviderComputer.HardwareType)">
            <summary>
                获取机器码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderComputer.GetMachineCodeArray(System.Boolean)">
            <summary>
                获取机器码序列，默认顺序为硬盘、处理器、网卡
            </summary>
            <param name="onlyFirst">为节省运行时间，默认只返回第一个</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderComputer.GetHardDiskInfoList">
            <summary>
                获取物理硬盘信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderComputer.GetNetworkAdapterInfoList">
            <summary>
                获取网卡信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderComputer.GetLogicalDiskInfoList">
            <summary>
                获取逻辑硬盘分区信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderComputer.HardDiskInfo">
            <summary>
                物理硬盘信息
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderComputer.HardDiskInfo.Model">
            <summary>
                硬盘型号
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderComputer.HardDiskInfo.SerialNumber">
            <summary>
                硬盘序列号
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderComputer.HardDiskInfo.InterfaceType">
            <summary>
                接口类型
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderComputer.HardDiskInfo.Size">
            <summary>
                硬盘大小，单位：字节
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderComputer.HardDiskInfo.MediaType">
            <summary>
                硬盘类型
            </summary>
        </member>
        <member name="T:Sayaka.Common.ProviderComputer.NetworkAdapterInfo">
            <summary>
                网卡信息
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderComputer.NetworkAdapterInfo.IpAddress">
            <summary>
                IP地址
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderComputer.NetworkAdapterInfo.MacAddress">
            <summary>
                MAC地址
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderComputer.NetworkAdapterInfo.IpSubnet">
            <summary>
                子网掩码
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderComputer.NetworkAdapterInfo.DefaultIpGateway">
            <summary>
                默认网关
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderComputer.NetworkAdapterInfo.DnsServerSearchOrder">
            <summary>
                DNS服务器
            </summary>
        </member>
        <member name="T:Sayaka.Common.ProviderComputer.LogicalDiskInfo">
            <summary>
                逻辑硬盘分区信息
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderComputer.LogicalDiskInfo.Name">
            <summary>
                分区名称，如：C:
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderComputer.LogicalDiskInfo.SerialNumber">
            <summary>
                分区序列号，格式化后会变化
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderComputer.LogicalDiskInfo.Size">
            <summary>
                分区大小，单位：字节
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderComputer.SetProcessWorkingSetSize(System.IntPtr,System.Int32,System.Int32)">
            <summary>
                设置应用程序最大和最小的运行空间，只会保留需要的内存
            </summary>
            <param name="process"></param>
            <param name="minSize"></param>
            <param name="maxSize"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderComputer.ClearMemory">
            <summary>
                释放内存，会保留需要的内存
            </summary>
        </member>
        <member name="T:Sayaka.Common.ProviderConfig">
            <summary>
              App.Config或Web.Config操作辅助类
            </summary>
        </member>
        <member name="T:Sayaka.Common.ProviderConfig.ProviderNameType">
            <summary>
              连接类型
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderConfig.ProviderNameType.Sqlserver">
            <summary>
              Sql Server
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderConfig.ProviderNameType.Access">
            <summary>
              Access
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderConfig.ProviderNameType.Sqlite">
            <summary>
              Sqlite
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderConfig.GetConnectionStrings(System.String)">
            <summary>
              获取connectionStrings值，不存在则返回null
            </summary>
            <param name="name"> Name </param>
            <returns> </returns>
        </member>
        <member name="M:Sayaka.Common.ProviderConfig.SetConnectionStrings(System.String,System.String,Sayaka.Common.ProviderConfig.ProviderNameType)">
            <summary>
              设置connectionStrings值
            </summary>
            <param name="name"> Name </param>
            <param name="connectionString"> ConnectionString </param>
            <param name="providerNameType"> 连接类型 </param>
        </member>
        <member name="M:Sayaka.Common.ProviderConfig.GetAppSettings(System.String)">
            <summary>
              获取appSettings值，不存在则返回null
            </summary>
            <param name="key"> key </param>
            <returns> </returns>
        </member>
        <member name="M:Sayaka.Common.ProviderConfig.SetAppSettings(System.String,System.String)">
            <summary>
              设置appSettings值
            </summary>
            <param name="key"> key </param>
            <param name="value"> value </param>
        </member>
        <member name="T:Sayaka.Common.ProviderConnectionStrings">
            <summary>
                ConnectionStrings帮助类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderConnectionStrings.GetAccessConnectionString(System.String)">
            <summary>
                Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\mydDatabase.mdb;User Id=admin;Password=;
            </summary>
            <param name="dataSource"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderConnectionStrings.GetAccessConnectionString(System.String,System.String)">
            <summary>
                Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\myDatabase.mdb;Jet OLEDB:Database Password=databasePassword;
            </summary>
            <param name="dataSource"></param>
            <param name="databasePassword">Jet OLEDB:Database Password</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderConnectionStrings.GetAccessConnectionString(System.String,System.String,System.String)">
            <summary>
                Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\mydDatabase.mdb;User Id=admin;Password=password;
            </summary>
            <param name="dataSource"></param>
            <param name="userId">为null时，默认使用admin</param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderConnectionStrings.GetAccessConnectionString(System.String,System.String,System.String,System.String)">
            <summary>
                Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\mydDatabase.mdb;User Id=admin;Password=password;Jet OLEDB:Database Password=databasePassword;
            </summary>
            <param name="dataSource"></param>
            <param name="userId">为null时，默认使用admin</param>
            <param name="password"></param>
            <param name="databasePassword">Jet OLEDB:Database Password</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderConnectionStrings.GetMySqlConnectionString(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
                Server=myServerAddress;Port=3306;Database=myDataBase;Uid=myUserId;Pwd=myPassword;
            </summary>
            <param name="server"></param>
            <param name="database"></param>
            <param name="userId"></param>
            <param name="password"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderConnectionStrings.GetMsSqlConnectionString(System.String,System.String)">
            <summary>
                Data Source=myDataSource;Initial Catalog=myDatabase;Integrated Security=SSPI;
            </summary>
            <param name="server"></param>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderConnectionStrings.GetMsSqlConnectionString(System.String,System.String,System.String,System.String)">
            <summary>
                Data Source=myDataSource;Initial Catalog=myDatabase;User Id=myUserId;Password=123456;
            </summary>
            <param name="server"></param>
            <param name="database"></param>
            <param name="userId">一般为sa</param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderConnectionStrings.GetOracleConnectionString(System.String,System.String,System.String)">
            <summary>
                Provider=msdaora;Data Source=MyOracleDB;User Id=myUserId;Password=myPassword;
            </summary>
            <param name="server"></param>
            <param name="userId"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderConnectionStrings.GetOracleConnectionString(System.String)">
            <summary>
                Provider=msdaora;Data Source=MyOracleDB;Persist Security Info=False;Integrated Security=Yes;
            </summary>
            <param name="server"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderConnectionStrings.GetExcelConnectionString(System.String,System.Boolean)">
            <summary>
                Provider=Microsoft.Jet.OLEDB.4.0;Data Source=D:\MyExcel.xls;Extended Properties="Excel 8.0;HDR=Yes;IMEX=1"
            </summary>
            <param name="filePath">EXCEL文件</param>
            <param name="firstRowIsColumnName">首行是否为列名</param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderDataTable">
            <summary>
                DataTable静态类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderDataTable.ToDataTable(System.Windows.Forms.DataGridView,System.String,System.String)">
            <summary>
                DataGridView转为DataTable
            </summary>
            <param name="gridView"></param>
            <param name="tableName"></param>
            <param name="dateTimeFormat"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDataTable.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                IEnumerable&lt;T&gt;转DataTable
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDataTable.ConvertTo``1(System.Data.DataTable)">
            <summary>
                DataTable转类型T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDataTable.ConvertTo``1(System.Collections.Generic.IList{System.Data.DataRow})">
            <summary>
                IList&lt;DataRow&gt;转类型T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDataTable.CreateItem``1(System.Data.DataRow)">
            <summary>
                DataRow转类型T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderDateTime">
            <summary>
                DateTime静态操作类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderDateTime.GetInternetTime(System.String,System.Int32)">
            <summary>
                从网址获取网络日期时间
            </summary>
            <param name="url">网站，包含http://、https://</param>
            <param name="timeout">超时，毫秒</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDateTime.GetTimeStamp10(System.String,System.Int32,System.Int32)">
            <summary>
                从网址获取10位时间戳字符串，单位：秒
            </summary>
            <param name="url"></param>
            <param name="addSeconds">时间修正</param>
            <param name="timeout">超时，单位：毫秒</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDateTime.GetTimeStampSeconds(System.String,System.Int32,System.Int32)">
            <summary>
                从网址获取10位时间戳，单位：秒
            </summary>
            <param name="url"></param>
            <param name="addSeconds">时间修正</param>
            <param name="timeout">超时，单位：毫秒</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDateTime.GetTimeStamp13(System.String,System.Int32,System.Int32)">
            <summary>
                从网址获取13位时间戳字符串，单位：毫秒
            </summary>
            <param name="url"></param>
            <param name="addSeconds">时间修正</param>
            <param name="timeout">超时，单位：毫秒</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDateTime.GetTimeStampMilliseconds(System.String,System.Int32,System.Int32)">
            <summary>
                从网址获取13位时间戳，单位：毫秒
            </summary>
            <param name="url"></param>
            <param name="addSeconds">时间修正</param>
            <param name="timeout">超时，单位：毫秒</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDateTime.GetTimeStamp13(System.DateTime)">
            <summary>
                日期时间转换为13位时间戳字符串，单位：毫秒
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDateTime.GetTimeStampMilliseconds(System.DateTime)">
            <summary>
                日期时间转换为13位时间戳，单位：毫秒
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDateTime.GetTimeStamp10(System.DateTime)">
            <summary>
                日期时间转换为10位时间戳字符串，单位：秒
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDateTime.GetTimeStampSeconds(System.DateTime)">
            <summary>
                日期时间转换为10位时间戳，单位：秒
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDateTime.GetDateTime(System.String,System.Boolean)">
            <summary>
                时间戳字符串转为DateTime
            </summary>
            <param name="timeStamp">时间戳字符串，13位精度毫秒、10位精度秒</param>
            <returns></returns>
            <param name="accurateToMilliseconds">是否精确到毫秒,true:毫秒,false:秒</param>
        </member>
        <member name="M:Sayaka.Common.ProviderDateTime.GetDateTimeFromTimeStamp10(System.String)">
            <summary>
                10位时间戳字符串转为DateTime
            </summary>
            <param name="timeStamp10">10位时间戳字符串，精确到秒</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDateTime.GetDateTimeFromTimeStamp13(System.String)">
            <summary>
                13位时间戳字符串转为DateTime
            </summary>
            <param name="timeStamp13">13位时间戳字符串，精确到毫秒</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDateTime.GetDateTime(System.Int64,System.Boolean)">
            <summary>
                时间戳转为DateTime
            </summary>
            <param name="timeStamp">时间戳，13位精度毫秒、10位精度秒</param>
            <param name="accurateToMilliseconds">是否精确到毫秒,true:毫秒,false:秒</param>
            <returns>返回一个日期时间</returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDateTime.GetDateTimeFromTotalMilliseconds(System.Int64)">
            <summary>
                13位时间戳转为DateTime
            </summary>
            <param name="timeStamp13">13位时间戳，精确到毫秒</param>
            <returns>返回一个日期时间</returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDateTime.GetDateTimeFromTotalSeconds(System.Int64)">
            <summary>
                10位时间戳转为DateTime
            </summary>
            <param name="timeStamp10">10位时间戳，精确到秒</param>
            <returns>返回一个日期时间</returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDateTime.GetTime(System.String)">
            <summary>
                10位时间戳字符串转为DateTime
            </summary>
            <param name="timeStamp">10位时间戳字符串，精确到秒</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDateTime.GetTime(System.Int64)">
            <summary>
                13位时间戳转为DateTime
            </summary>
            <param name="timeStamp">13位时间戳，精确到毫秒</param>
            <returns>返回一个日期时间</returns>
        </member>
        <member name="T:Sayaka.Common.ProviderDesEncrypt">
            <summary>
                DES加密、解密类
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderDesEncrypt.DEFAULT_KEY">
            <summary>
                默认密钥，默认值为"sayakame"
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderDesEncrypt.Encrypt(System.String,System.String)">
            <summary>
                DES加密
            </summary>
            <param name="inputString">要加密的字符串</param>
            <param name="key">密钥，默认值为"sayakame"</param>
            <returns>通过DES加密后的字符串</returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDesEncrypt.Decrypt(System.String,System.String)">
            <summary>
                DES解密，解密失败返回null
            </summary>
            <param name="inputString">要解密的字符串</param>
            <param name="key">密钥，默认值为"sayakame"</param>
            <returns>解密失败返回null</returns>
        </member>
        <member name="M:Sayaka.Common.ProviderDo.Do``1(``0,System.Action{``0})">
            <summary>
                链式开发扩展
            </summary>
            <param name="t"></param>
            <param name="action"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderExcel">
            <summary>
                Excel辅助类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderExcel.CreateDataTable(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
                获取指定工作薄数据
            </summary>
            <param name="filePath">EXCEL文件</param>
            <param name="sheetName">工作薄名称，或为工作薄名称的一部分</param>
            <param name="rowCount">获取行数，0为全部</param>
            <param name="firstRowIsColumnName">首行是否为列名</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderExcel.CreateDataTable(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
                获取指定工作薄数据
            </summary>
            <param name="filePath">EXCEL文件</param>
            <param name="sheetIndex">工作薄序号</param>
            <param name="rowCount">获取行数，0为全部</param>
            <param name="firstRowIsColumnName">首行是否为列名</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderExcel.GetSheetNames(System.String)">
            <summary>
                获取工作簿名称列表
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderExcel.CreateExcel(System.Data.DataTable,System.String,System.Int32)">
            <summary>
                将DataTable保存为Excel
            </summary>
            <param name="dataTable">数据源</param>
            <param name="excelFile">目的文件</param>
            <param name="rowCount">导出的行数，0为全部</param>
        </member>
        <member name="M:Sayaka.Common.ProviderExcel.CreateExcel(System.Data.DataSet,System.String,System.Int32)">
            <summary>
                将DataSet保存为Excel
            </summary>
            <param name="dataSet">数据源</param>
            <param name="excelFile">目的文件</param>
            <param name="rowCount">导出的行数，0为全部</param>
        </member>
        <member name="M:Sayaka.Common.ProviderExcel.SetTypeGuessRows(System.Boolean)">
            <summary>
                设置数据类型判断行数
            </summary>
            <param name="isDfault">是否恢复默认,true为恢复默认</param>
        </member>
        <member name="T:Sayaka.Common.ProviderFakeUserAgent">
            <summary>
                随机生成UserAgent。请使用FakeUserAgent.Random
            </summary>
        </member>
        <member name="T:Sayaka.Common.ProviderFakeUserAgent.BrowserType">
            <summary>
                浏览器
            </summary>
        </member>
        <member name="T:Sayaka.Common.ProviderFakeUserAgent.OsType">
            <summary>
                操作系统
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderFakeUserAgent.OsType.Windows">
            <summary>
                Windows
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderFakeUserAgent.OsType.Mac">
            <summary>
                Mac OS
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderFakeUserAgent.OsType.Android">
            <summary>
                安卓手机
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderFakeUserAgent.OsType.Ios">
            <summary>
                iPhone OS
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderFakeUserAgent.RandomComputer">
            <summary>
                PC端平台、随机所有浏览器
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderFakeUserAgent.RandomMobile">
            <summary>
                移动平台、随机所有浏览器
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderFakeUserAgent.RandomChrome">
            <summary>
                PC端平台、随机所有浏览器
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderFakeUserAgent.RandomFirefox">
            <summary>
                PC端平台、随机所有浏览器
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderFakeUserAgent.RandomAll">
            <summary>
                随机所有平台、随机所有浏览器
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderFakeUserAgent.Random(Sayaka.Common.ProviderFakeUserAgent.OsType,Sayaka.Common.ProviderFakeUserAgent.BrowserType)">
            <summary>
                使用随机方法生成UserAgent
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderFakeUserAgent.GetRandomSeed">
            <summary>
                使用RNGCryptoServiceProvider生成种子
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderFakeUserAgent.GetRandomSeedbyGuid">
            <summary>
                使用Guid生成种子
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderFile">
            <summary>
                文本操作类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderFile.AddPrefixString(System.String)">
            <summary>
                添加前缀字符串，"yyyy-mm-dd HH:mm:ss 完整函数名 -> "
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderFile.GetTxtFileEncoding(System.String)">
            <summary>
                获取TXT文本文件编码
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderFile.MergeFiles(System.String,System.String[],System.Collections.Generic.IEnumerable{System.String}[],System.Text.Encoding)">
            <summary>
                文本文件合并去重，自动识别Encoding
            </summary>
            <param name="outputFileName"></param>
            <param name="inputFileNames"></param>
            <param name="inputTextLinesList"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderFile.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
                读取全部，出错返回null，自动识别Encoding
            </summary>
            <param name="fileName"></param>
            <param name="encoding">默认自动判断Encoding</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderFile.ReadAllLines(System.String,System.Text.Encoding,System.String[])">
            <summary>
                读取多行，出错返回null，自动识别Encoding
            </summary>
            <param name="fileName"></param>
            <param name="encoding">默认自动判断Encoding</param>
            <param name="separator">行分隔符，默认为new[]{"\r\n","\n","\r"}</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderFile.WriteLine(System.String,System.String,System.Text.Encoding)">
            <summary>
                写入一行字符串到文件（创建或者覆盖），自动识别Encoding
            </summary>
            <param name="fileName"></param>
            <param name="line"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderFile.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
                写入字符串到文件（创建或者覆盖），自动识别Encoding
            </summary>
            <param name="fileName"></param>
            <param name="text"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderFile.WriteAllLines(System.String,System.String[],System.Text.Encoding,System.String)">
            <summary>
                写入多行字符串到文件（创建或者覆盖），自动识别Encoding
            </summary>
            <param name="fileName"></param>
            <param name="lines"></param>
            <param name="encoding"></param>
            <param name="separator">行分隔符，默认为"\r\n"</param>
        </member>
        <member name="M:Sayaka.Common.ProviderFile.AppendLine(System.String,System.String,System.Text.Encoding)">
            <summary>
                添加一行字符串到文件末尾（创建或者添加），自动识别Encoding
            </summary>
            <param name="fileName"></param>
            <param name="line"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderFile.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
                添加字符串到文件末尾（创建或者添加），自动识别Encoding
            </summary>
            <param name="fileName"></param>
            <param name="text"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderFile.AppendAllLines(System.String,System.String[],System.Text.Encoding,System.String)">
            <summary>
                添加多行字符串到文件末尾（创建或者添加），自动识别Encoding
            </summary>
            <param name="fileName"></param>
            <param name="lines"></param>
            <param name="encoding"></param>
            <param name="separator">行分隔符，默认为"\r\n"</param>
        </member>
        <member name="M:Sayaka.Common.ProviderFile.WriteLineToLogFile(System.String,System.String,System.Text.Encoding,System.String,System.String)">
            <summary>
                写入日志，默认保存在程序目录下log\yyyy-MM-dd目录下
            </summary>
            <param name="logFileName">文件名称，如：运行日志.log</param>
            <param name="logLine">日志行数据，如：运行成功</param>
            <param name="encoding">文件编码，默认为：Encoding.Default</param>
            <param name="logPath">文件目录，默认为：Path.Combine(Application.StartupPath, $"log\\{DateTime.Now:yyyy-MM-dd}")</param>
            <param name="logLinePrefix">行前缀，默认为：DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss ")</param>
        </member>
        <member name="M:Sayaka.Common.ProviderFile.WriteLine(System.String,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
                写入一行，自动识别Encoding
            </summary>
            <param name="fileName"></param>
            <param name="line"></param>
            <param name="append"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderFile.WriteAllLines(System.String,System.String[],System.Boolean,System.Text.Encoding,System.String)">
            <summary>
                写入多行，自动识别Encoding
            </summary>
            <param name="fileName"></param>
            <param name="lines"></param>
            <param name="append">添加或者覆盖，默认为覆盖</param>
            <param name="encoding"></param>
            <param name="separator">行分隔符，默认为"\r\n"</param>
        </member>
        <member name="M:Sayaka.Common.ProviderFile.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            </summary>
            <param name="fileName"></param>
            <param name="text"></param>
            <param name="append"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderFile.WriteLogLine(System.String,System.String,System.Text.Encoding,System.String,System.String)">
            <summary>
            </summary>
            <param name="logFileName"></param>
            <param name="logLine"></param>
            <param name="encoding"></param>
            <param name="logPath"></param>
            <param name="logLinePrefix"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderFile.WriteLines(System.String,System.String[],System.Boolean,System.Text.Encoding,System.String)">
            <summary>
            </summary>
            <param name="fileName"></param>
            <param name="lines"></param>
            <param name="append"></param>
            <param name="encoding"></param>
            <param name="separator"></param>
        </member>
        <member name="T:Sayaka.Common.ProviderHash">
            <summary>
            哈希算法静态操作类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderHash.MD5Hash(System.String)">
            <summary>
                生成32位小写MD5Hash值
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderHash.HMACSHA256Hash(System.String,System.String)">
            <summary>
                生成小写HMACSHA256Hash值
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderHash.HMACSHA256Hash2(System.String,System.String)">
            <summary>
                生成小写HMACSHA256Hash值
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderHash.HMACSHA256HashToBase64String(System.String,System.String)">
            <summary>
                生成HMACSHA256HashToBase64String值
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderHash.HMACSHA1Hash(System.String,System.String)">
            <summary>
                生成小写HMACSHA1Hash值
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderHash.HMACSHA512Hash(System.String,System.String)">
            <summary>
                生成小写HMACSHA512Hash值
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderHash.HMACSHA1HashToBase64String(System.String,System.String)">
            <summary>
                使用秘钥进行 HMAC-SHA1 签名，并对二进制结果进行 Base64 编码
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderHash.HMACMD5Hash(System.String,System.String)">
            <summary>
                生成小写HMACMD5Hash值
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderHash.SHA256Hash(System.String)">
            <summary>
                生成32位小写SHA256Hash值
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderHash.SHA1Hash(System.String)">
            <summary>
                生成小写SHA1Hash值
            </summary>
        </member>
        <member name="T:Sayaka.Common.ProviderHtml">
            <summary>
            Html操作类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderHtml.GetRemoteHtml(System.String,System.Text.Encoding,System.String)">
            <summary>
                获取远程文件Html代码
            </summary>
            <param name="url"> </param>
            <param name="encoding">编码，设置为null自动设置</param>
            <param name="cookie"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHtml.GetCookie(System.String,System.String,System.String,System.Text.Encoding)">
            <summary>
            获取Cookie字符串
            </summary>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="method"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHtml.RemoveHtmlTag(System.String)">
            <summary>
                移除Html标签
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.RequestMethod">
            <summary>
                请求方法
            </summary>
        </member>
        <member name="F:Sayaka.Common.RequestMethod.GET">
            <summary>
            </summary>
        </member>
        <member name="F:Sayaka.Common.RequestMethod.POST">
            <summary>
            </summary>
        </member>
        <member name="F:Sayaka.Common.RequestMethod.PUT">
            <summary>
            </summary>
        </member>
        <member name="F:Sayaka.Common.RequestMethod.DELETE">
            <summary>
            </summary>
        </member>
        <member name="F:Sayaka.Common.RequestMethod.HEAD">
            <summary>
            </summary>
        </member>
        <member name="F:Sayaka.Common.RequestMethod.OPTIONS">
            <summary>
            </summary>
        </member>
        <member name="F:Sayaka.Common.RequestMethod.PATCH">
            <summary>
            </summary>
        </member>
        <member name="F:Sayaka.Common.RequestMethod.MERGE">
            <summary>
            </summary>
        </member>
        <member name="F:Sayaka.Common.RequestMethod.COPY">
            <summary>
            </summary>
        </member>
        <member name="T:Sayaka.Common.RequestFormat">
            <summary>
                请求数据类型
            </summary>
        </member>
        <member name="F:Sayaka.Common.RequestFormat.JsonString">
            <summary>
                application/json;charset=utf-8
            </summary>
        </member>
        <member name="F:Sayaka.Common.RequestFormat.QueryString">
            <summary>
                application/x-www-form-urlencoded;charset=utf-8
            </summary>
        </member>
        <member name="F:Sayaka.Common.RequestFormat.XmlString">
            <summary>
                application/xml;charset=utf-8
            </summary>
        </member>
        <member name="F:Sayaka.Common.RequestFormat.Default">
            <summary>
                text/html;charset=utf-8
            </summary>
        </member>
        <member name="T:Sayaka.Common.HttpRequestInfo">
            <summary>
                请求信息类
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpRequestInfo.Url">
            <summary>
                Url
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpRequestInfo.RequestMethod">
            <summary>
                请求方法
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpRequestInfo.RequestFormat">
            <summary>
                请求格式
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpRequestInfo.RequestBody">
            <summary>
                提交数据 JsonString、QueryString、XMLString;
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpRequestInfo.WebProxy">
            <summary>
                代理
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpRequestInfo.Headers">
            <summary>
                文件头
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpRequestInfo.CookieCollection">
            <summary>
                CookieCollection
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpRequestInfo.CookieString">
            <summary>
                CookieString
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpRequestInfo.X509Certificate2Collection">
            <summary>
                X509证书
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpRequestInfo.Encoding">
            <summary>
                编码，已实现无视编码，一般情况下不用设置
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpRequestInfo.UserAgent">
            <summary>
                默认为："Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36"
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpRequestInfo.Accept">
            <summary>
                默认为："*/*"
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpRequestInfo.Referer">
            <summary>
                Referer
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpRequestInfo.ContentType">
            <summary>
                ContentType
            </summary>
        </member>
        <member name="T:Sayaka.Common.HttpResponseInfo">
            <summary>
                返回信息类
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpResponseInfo.CookieCollection">
            <summary>
                CookieCollection
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpResponseInfo.CookieString">
            <summary>
                CookieString
            </summary>
        </member>
        <member name="P:Sayaka.Common.HttpResponseInfo.ResponseBody">
            <summary>
                返回数据
            </summary>
        </member>
        <member name="T:Sayaka.Common.ProviderHttp">
            <summary>
                Http静态类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderHttp.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Sayaka.Common.HttpRequestInfo)">
            <summary>
            </summary>
            <param name="url"></param>
            <param name="queryString"></param>
            <param name="httpRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHttp.GetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Sayaka.Common.HttpRequestInfo)">
            <summary>
            </summary>
            <param name="url"></param>
            <param name="queryString"></param>
            <param name="httpRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHttp.GetAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Sayaka.Common.HttpRequestInfo)">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="queryString"></param>
            <param name="httpRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHttp.Post(System.String,System.String,Sayaka.Common.HttpRequestInfo)">
            <summary>
                POST JSON字符串
            </summary>
            <param name="url"></param>
            <param name="jsonString"></param>
            <param name="httpRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHttp.PostAsync(System.String,System.String,Sayaka.Common.HttpRequestInfo)">
            <summary>
                POST JSON字符串
            </summary>
            <param name="url"></param>
            <param name="jsonString"></param>
            <param name="httpRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHttp.PostAsync``1(System.String,System.String,Sayaka.Common.HttpRequestInfo)">
            <summary>
                POST JSON字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="jsonString"></param>
            <param name="httpRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHttp.Post(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Sayaka.Common.HttpRequestInfo)">
            <summary>
                POST表单
            </summary>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="httpRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHttp.PostAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Sayaka.Common.HttpRequestInfo)">
            <summary>
                POST表单
            </summary>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="httpRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHttp.PostAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Sayaka.Common.HttpRequestInfo)">
            <summary>
                POST表单
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="httpRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHttp.Put(System.String,System.String,Sayaka.Common.HttpRequestInfo)">
            <summary>
            </summary>
            <param name="url"></param>
            <param name="jsonString"></param>
            <param name="httpRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHttp.PutAsync(System.String,System.String,Sayaka.Common.HttpRequestInfo)">
            <summary>
            </summary>
            <param name="url"></param>
            <param name="jsonString"></param>
            <param name="httpRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHttp.PutAsync``1(System.String,System.String,Sayaka.Common.HttpRequestInfo)">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="jsonString"></param>
            <param name="httpRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHttp.Put(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Sayaka.Common.HttpRequestInfo)">
            <summary>
            </summary>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="httpRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHttp.PutAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Sayaka.Common.HttpRequestInfo)">
            <summary>
            </summary>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="httpRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHttp.PutAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Sayaka.Common.HttpRequestInfo)">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="httpRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHttp.Delete(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Sayaka.Common.HttpRequestInfo)">
            <summary>
            </summary>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="httpRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHttp.DeleteAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Sayaka.Common.HttpRequestInfo)">
            <summary>
            </summary>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="httpRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHttp.DeleteAsync``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},Sayaka.Common.HttpRequestInfo)">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="httpRequestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderHttp.HttpRequest(Sayaka.Common.HttpRequestInfo)">
            <summary>
                Http请求
            </summary>
            <param name="requestInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderImage">
            <summary>
            Image与byte[]转换类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderImage.Compare(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Int32)">
            <summary>
            比较两个图像
            </summary>
            <param name="bmp1"></param>
            <param name="bmp2"></param>
            <param name="threshold">阈值，0-255</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderImage.CompareBitmapsFast(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Int32)">
            <summary>
            比较图片并获得第一个不同值的点
            </summary>
            <param name="bmp1"></param>
            <param name="bmp2"></param>
            <param name="threshold">阈值，0-255</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderImage.Gray(System.Drawing.Bitmap)">
            <summary>
            灰度化
            </summary>
            <param name="bitmap"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderImage.GrayReverse(System.Drawing.Bitmap)">
            <summary>
            图像灰度反转
            </summary>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderImage.Threshold(System.Drawing.Bitmap)">
            <summary>
            二值化
            </summary>
            <param name="bitmap"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderImage.CalcImageHash(System.Drawing.Bitmap)">
            <summary>
            计算图片哈希指纹64位
            </summary>
            <param name="bitmap"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderImage.CalcImageHashSimilarDegree(System.String,System.String)">
            <summary>
            比较图片哈希相似度，越小越相似，10以内认为是同一张图片
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderImage.IsTransparentBackgroundPicture(System.Drawing.Bitmap)">
            <summary>
            如果四个角的颜色相等，则认为是透明背景
            </summary>
            <param name="pBmp"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderImage.FindPic(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Bitmap,System.Drawing.Bitmap,System.Int32)">
            <summary>
            相似找图，自动判断是否为透明背景描图
            </summary>
            <param name="height"></param>
            <param name="bitBmp">大图数据</param>
            <param name="smallBmp">小图数据</param>
            <param name="threshold">阈值，0-255，默认为20</param>
            <param name="left"></param>
            <param name="top"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderImage.FindColor(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Bitmap,System.Drawing.Color,System.Int32)">
            <summary>
            找色
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="bigBmp"></param>
            <param name="color"></param>
            <param name="threshold">阈值，0-255，默认为20</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderImage.GetTransparentBackgroundPixelData(System.Drawing.Bitmap)">
            <summary>
            获取透明像素点信息，透明为true，不透明为false
            </summary>
            <param name="pData"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderImage.CompareColor(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            比较颜色是否相同或相近
            </summary>
            <param name="color1"></param>
            <param name="color2"></param>
            <param name="threshold"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderIniWriter">
            <summary>
                Ini文件读写
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderIniWriter.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
                写操作
            </summary>
            <param name="section">节</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderIniWriter.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
                读操作
            </summary>
            <param name="section">接</param>
            <param name="key">键</param>
            <param name="defValue">未读取到的默认值</param>
            <param name="retvalue">读取到的值</param>
            <param name="size">大小</param>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderIniWriter.ReadKeyValue(System.String,System.String,System.String,System.String)">
            <summary>
                读INI文件
            </summary>
            <param name="section">节</param>
            <param name="key">键</param>
            <param name="defValue">未读取到时候的默认值</param>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Sayaka.Common.ProviderIniWriter.WriteKeyValue(System.String,System.String,System.String,System.String)">
            <summary>
                写INI文件
            </summary>
            <param name="section">节</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="filePath">文件路径</param>
            用法  FileINI.WriteIni("ConfigURL", "URL", this.tbxUrl.Text.Trim(), ConfigFilePath);
        </member>
        <member name="M:Sayaka.Common.ProviderIniWriter.DeleteSection(System.String,System.String)">
            <summary>
                删除节
            </summary>
            <param name="section">节</param>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderIniWriter.DeleteKey(System.String,System.String,System.String)">
            <summary>
                删除键
            </summary>
            <param name="section">节</param>
            <param name="key">键</param>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderJavascript">
            <summary>
            Javascript字符串操作类，返回标准的Javascript字符串，可被浏览器JS引擎执行
            </summary>
        </member>
        <member name="T:Sayaka.Common.ProviderJavascript.NameType">
            <summary>
                获取元素关键字类别
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderJavascript.NameType.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderJavascript.NameType.ClassName">
            <summary>
            ClassName
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderJavascript.NameType.TagName">
            <summary>
            TagName
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderJavascript.NameType.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.keybd_event(System.Byte,System.Byte,System.Int32,System.Int32)">
            <summary>
            键盘操作函数Win32Api
            </summary>
            <param name="bVk"></param>
            <param name="bScan"></param>
            <param name="dwFlags"></param>
            <param name="dwExtraInfo"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.JsGetElement(System.String,Sayaka.Common.ProviderJavascript.NameType,System.Int32,System.String)">
            <summary>
                获取返回"document.getElementsBy..."字符串，如：JsGetElement("txtPrice", NameType.Name, 0);
            </summary>
            <param name="key">元素查找关键字：Name,ClassName,TagName,Id</param>
            <param name="type">元素查找关键字类别：Name,ClassName,TagName,Id</param>
            <param name="index">元素索引：Name,ClassName,TagName返回的是列表，返回第几个元素，默认返回第1个，值为0，值为-1时返回最后一个</param>
            <param name="fatherElement">父级元素，用JsGetElement获得</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.JsGetElementCount(System.String,Sayaka.Common.ProviderJavascript.NameType,System.String)">
            <summary>
                获取返回"document.getElementsBy..."对应元素的数量，如：JsGetElement("txtPrice",
                NameType.Name);用browser.EvaluateScriptAsync(string script)调用
            </summary>
            <param name="key">元素查找关键字：Name,ClassName,TagName,Id</param>
            <param name="type">元素查找关键字类别：Name,ClassName,TagName,Id</param>
            <param name="fatherElement">父级元素，用JsGetElement获得</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.JsQuerySelector(System.String,System.String)">
            <summary>
                返回文档中匹配指定的CSS选择器的第一元素
            </summary>
            <param name="cssSelector"></param>
            <param name="fatherElement"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.JsQuerySelectorAll(System.String,System.Int32,System.String)">
            <summary>
                返回文档中匹配指定 CSS 选择器的所有元素中指定序号的元素
            </summary>
            <param name="cssSelector"></param>
            <param name="index">默认为0，返回第一个，为-1时，返回最后一个</param>
            <param name="fatherElement"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.JsQuerySelectorAllCount(System.String,System.String)">
            <summary>
                返回文档中匹配指定 CSS 选择器的所有元素个数，用browser.EvaluateScriptAsync(string script)调用
            </summary>
            <param name="cssSelector"></param>
            <param name="fatherElement"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.SimulateKeyboardInput(System.String)">
            <summary>
                模拟键盘输入
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.JsFocus(System.String)">
            <summary>
                获取js脚本，模拟获取输入焦点，用browser.EvaluateScriptAsync(string script)调用
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.JsClick(System.String)">
            <summary>
                获取js脚本，模拟触发Click事件，用browser.EvaluateScriptAsync(string script)调用
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.JsSetValue(System.String,System.String)">
            <summary>
                获取js脚本，直接设置网页元素值，没有模拟键盘输入动作，无需获取焦点。触发oninput、onpropertychange、onkeydown、onkeyup、onpress事件
            </summary>
            <param name="element"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.JsGetValue(System.String)">
            <summary>
                获取js脚本，获取网页元素值，用browser.EvaluateScriptAsync(string script)调用
            </summary>
            <param name="element">元素，通过JsGetElement获取</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.JsGetInnerText(System.String)">
            <summary>
                获取js脚本，获取网页元素InnerText值，用browser.EvaluateScriptAsync(string script)调用
            </summary>
            <param name="element">元素，通过JsGetElement获取</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.JsGetPropertyValue(System.String,System.String)">
            <summary>
                获取js脚本，获取网页元素InnerText值，用browser.EvaluateScriptAsync(string script)调用
            </summary>
            <param name="element">元素，通过JsGetElement获取</param>
            <param name="property">属性名称，如value、innerText、innerHtml</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.JsRemoveAttribute(System.String,System.String)">
            <summary>
            删除Attribute
            </summary>
            <param name="element"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.JsSetAttribute(System.String,System.String,System.String)">
            <summary>
            设置Attribute
            </summary>
            <param name="element"></param>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.JsGetElement(System.String,System.String,Sayaka.Common.ProviderJavascript.NameType,System.Int32)">
            <summary>
                获取返回"document.getElementsBy..."字符串，如：JsGetElement(fatherElement,"txtPrice", NameType.Name, 0);
            </summary>
            <param name="fatherElement">父级元素，用JsGetElement获得</param>
            <param name="key">元素查找关键字：Name,ClassName,TagName,Id</param>
            <param name="type">元素查找关键字类别：Name,ClassName,TagName,Id</param>
            <param name="index">元素索引：Name,ClassName,TagName返回的是列表，返回第几个元素，默认返回第1个，值为0，值为-1时返回最后一个</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.simulateKeyboarInput(System.String)">
            <summary>
                模拟键盘输入
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.JsRemoveProperty(System.String,System.String)">
            <summary>
                同JsRemoveAttribute
            </summary>
            <param name="element"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.JsSetPropertyValue(System.String,System.String,System.String)">
            <summary>
                同JsSetAttribute
            </summary>
            <param name="element"></param>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.GetScriptFocus(System.String)">
            <summary>
                请使用JsFocus。获取js脚本，模拟获取输入焦点
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.GetScriptClick(System.String)">
            <summary>
                请使用JsClick。获取js脚本，模拟点击
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJavascript.GetScriptValue(System.String,System.String)">
            <summary>
                请使用JsSetValue。获取js脚本，直接设置网页元素值，没有模拟键盘输入动作。
            </summary>
            <param name="element"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderJsonSerialize">
            <summary>
                JSON序列化操作类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderJsonSerialize.JsonDeserializeObject``1(System.String)">
            <summary>
                JSON反序列化，封装new JavaScriptSerializer().Deserialize&lt;T&gt;(jsonString)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJsonSerialize.JsonSerializeObject``1(``0,System.Boolean)">
            <summary>
                JSON序列化，封装new JavaScriptSerializer().Serialize(obj)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="format">格式化JSON字符串</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderJsonSerialize.FormatJsonText(System.String)">
            <summary>
                格式化JSON字符串
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderMath">
            <summary>
            Math静态操作类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderMath.GetRandomDouble(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                返回指定范围、指定比率的随机数，示例：GetRandomDouble(10,20,0.1,0.9)
            </summary>
            <param name="startRange">起始值，如：1</param>
            <param name="endRange">结束值，如：100</param>
            <param name="startPercent">起始百分比，如：0.1</param>
            <param name="endPercent">结束百分比，如：0.9</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderMath.NextDouble(System.Random,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                返回指定范围、指定比率的随机数，示例：rnd.NextDouble(10,20,0.1,0.9)
            </summary>
            <param name="random"></param>
            <param name="startValue">起始值，如：1</param>
            <param name="endValue">结束值，如：100</param>
            <param name="startPercent">起始百分比，如：0.1</param>
            <param name="endPercent">结束百分比，如：0.9</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderMath.NextInt64(System.Random)">
            <summary>
            下一个Int64随机数
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderMath.NextUInt64(System.Random)">
            <summary>
            下一个UInt64随机数
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderMath.GetRandomSeed">
            <summary>
                使用RNGCryptoServiceProvider生成随机数种子
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderMath.CalcDecimalLength(System.String[])">
            <summary>
                计算小数点位数
            </summary>
            <param name="textList"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderMath.CalcDecimalLength(System.String)">
            <summary>
                计算小数点位数
            </summary>
            <param name="text">输入数字的字符串格式</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderMath.TruncateDecimal(System.String,System.Int32,System.Boolean)">
            <summary>
                保留小数点位数，不四舍五入
            </summary>
            <param name="text">输入数字的字符串格式</param>
            <param name="decimalLength">保留小数点位数</param>
            <param name="paddingZero">位数不够用0被足，如1.23，保留5位小数为1.23000</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderMath.TrimEndZero(System.String,System.Char)">
            <summary>
            删除小数点后面的无效0
            </summary>
            <param name="text"></param>
            <param name="trimChar"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderMath.RoundDecimal(System.String,System.Int32,System.Boolean)">
            <summary>
                保留小数点位数，四舍五入
            </summary>
            <param name="text">输入数字的字符串格式</param>
            <param name="decimalLength">保留小数点位数</param>
            <param name="paddingZero">位数不够用0被足，如1.23，保留5位小数为1.23000</param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderMd5Encrypt">
            <summary>
                Md5静态操作类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderMd5Encrypt.Md5Upper(System.String)">
            <summary>
                MD5加密，输出大写32位字符串
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderMd5Encrypt.Md5Lower(System.String)">
            <summary>
                MD5加密，输出小写32位字符串
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderMd5Encrypt.Md5(System.String)">
            <summary>
                MD5 32位加密 加密后密码为大写
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderMd5Encrypt.Md5_32(System.String)">
            <summary>
                MD5 32位加密 加密后密码为小写
            </summary>
            <param name="inputString"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderMutex">
            <summary>
                C#互斥量使用示例代码
            </summary>
            <remarks>已在经过测试并上线运行，可直接使用</remarks>
        </member>
        <member name="M:Sayaka.Common.ProviderMutex.GetGlobalMutexKey(System.String)">
            <summary>
                获取文件名对应的进程同步键。生成"Global\XXXXXX"格式的操作系统级的同步键
            </summary>
            <param name="filePath">文件路径(请注意大小写及空格）或普通字符串</param>
            <returns>进程同步键(互斥体名称)</returns>
        </member>
        <member name="M:Sayaka.Common.ProviderMutex.MutexExec(System.String,System.Action)">
            <summary>
                进程间同步执行，可用于多进程同时读写一个文件
            </summary>
            <param name="filePath">文件路径(请注意大小写及空格）或普通字符串</param>
            <param name="action">同步处理操作</param>
        </member>
        <member name="M:Sayaka.Common.ProviderMutex.MutexExec(System.String,System.Action,System.Boolean)">
            <summary>
                进程间同步执行
            </summary>
            <param name="mutexKey">
                操作系统级的同步键
                (如果将 name 指定为 null 或空字符串，则创建一个局部互斥体。
                如果名称以前缀“Global\”开头，则 mutex 在所有终端服务器会话中均为可见。
                如果名称以前缀“Local\”开头，则 mutex 仅在创建它的终端服务器会话中可见。
                如果创建已命名 mutex 时不指定前缀，则它将采用前缀“Local\”。)
            </param>
            <param name="action">同步处理操作</param>
            <param name="recursive">指示当前调用是否为递归处理，递归处理时检测到异常则抛出异常，避免进入无限递归</param>
        </member>
        <member name="M:Sayaka.Common.ProviderMutex.HasMutex(System.String)">
            <summary>
                是否已创建互斥体
            </summary>
            <param name="filePath">文件路径(请注意大小写及空格）或普通字符串</param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderNetCheck">
            <summary>
                网络测试
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderNetCheck.Ping(System.String,System.Int32)">
            <summary>
                Ping
            </summary>
            <param name="ip">IP地址、计算机名称、域名</param>
            <param name="timeout">超时，毫秒</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderNetCheck.CheckWebsite(System.String,System.String,System.Text.Encoding,System.TimeSpan@,System.String@)">
            <summary>
                网站测试
            </summary>
            <param name="url">网址</param>
            <param name="match">匹配值</param>
            <param name="encoding">编码</param>
            <param name="ts">返回时间间隔</param>
            <param name="content">返回内容</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderNetCheck.CheckMssql(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
                Mssql测试
            </summary>
            <param name="server">服务器地址</param>
            <param name="database">数据库名称</param>
            <param name="userid">用户名</param>
            <param name="password">密码</param>
            <param name="connectionTimeout">超时设置</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderNetCheck.IsConnectInternet">
            <summary>
                用于检查网络是否可以连接互联网,true表示连接成功,false表示连接失败
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderNetCheck.Ping(System.String,System.Int32,System.Net.NetworkInformation.PingReply@)">
            <summary>
                用于检查IP地址或域名是否可以使用TCP/IP协议访问(使用Ping命令),true表示Ping成功,false表示Ping失败
            </summary>
            <param name="ip">输入参数,表示IP地址或域名</param>
            <param name="timeout">超时，毫秒</param>
            <param name="pingReply">返回值</param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.WebCheckResult">
            <summary>
                网络测试返回值
            </summary>
        </member>
        <member name="F:Sayaka.Common.WebCheckResult.Failed">
            <summary>
                失败
            </summary>
        </member>
        <member name="F:Sayaka.Common.WebCheckResult.NoMatch">
            <summary>
                返回值不匹配
            </summary>
        </member>
        <member name="F:Sayaka.Common.WebCheckResult.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:Sayaka.Common.WebCheckResult.OK">
            <summary>
                成功
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderParse.Parse``1(System.Object)">
            <summary>
                泛型类型转换Parse
            </summary>
            <typeparam name="T">要转换的基础类型</typeparam>
            <param name="value">要转换的值</param>
            <returns></returns>
            <remark>
            </remark>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sayaka.Common.ProviderParse.ChangeType``1(System.Object)">
            <summary>
                调用Convert.ChangeType进行类型转换，错误抛出InvalidCastException
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sayaka.Common.ProviderParse.To``1(System.Object)">
            <summary>
                调用Convert.ChangeType进行类型转换，错误抛出InvalidCastException
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Sayaka.Common.ProviderProcess">
            <summary>
            Process静态操作类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderProcess.RunExeWithArguments(System.String,System.String,System.Diagnostics.ProcessWindowStyle,System.Boolean)">
            <summary>
            运程程序带参数
            </summary>
            <param name="fileName">程序名称</param>
            <param name="arguments">参数</param>
            <param name="windowStyle"></param>
            <param name="showWindow">是否显示CMD窗口</param>
        </member>
        <member name="M:Sayaka.Common.ProviderProcess.RunCmd(System.String[])">
            <summary>
            执行CMD命令，如：RunCmd("ping 127.0.0.1")
            </summary>
            <param name="cmds">要执行的cmd命令，如：RunCmd(new []{"ping 127.0.0.1"})</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderProcess.RunCmd(System.String)">
            <summary>
            执行CMD命令，如：RunCmd("ping 127.0.0.1")
            </summary>
            <param name="cmd">要执行的cmd命令，如：RunCmd("ping 127.0.0.1")</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderProcess.Start(System.String,System.String)">
            <summary>
            打开程序、文件、路径
            </summary>
            <param name="fileName"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderProcess.RegsvrDll(System.String)">
            <summary>
            执行regsvr32.exe /s 注册OCX控件
            </summary>
            <param name="ocxFullName"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderProcess.RefreshNotifyIconArea">
            <summary>
            模拟鼠标在通知区域移动（物理鼠标不移动），清除异常关闭程序残留的图标
            </summary>
        </member>
        <member name="T:Sayaka.Common.ProviderQq">
            <summary>
                QQ帮助类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderQq.CheckQQOnLine(System.String)">
            <summary>The check qq on line.</summary>
            <param name="QQCode">The qq code.</param>
            <returns>The <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:Sayaka.Common.ProviderQq.GetQQOnlineChatUrl(System.String)">
            <summary>返回联系QQ的URL </summary>
            <param name="qqCode"></param>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:Sayaka.Common.ProviderQq.GetQQZoneUrl(System.String)">
            <summary>返回QQ空间的URL</summary>
            <param name="qqCode"></param>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="T:Sayaka.Common.ProviderRegedit">
            <summary>
              HKEY_LOCAL_MACHINE辅助类
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderRegedit.RootPath">
            <summary>
              根路径，默认为@"SoftWare\Sayaka"，前后都不加"\"
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderRegedit.SetKeyValue(System.String,System.String,System.String)">
            <summary>
              设置键值
            </summary>
            <param name="item"> 注册表项目，如：@"NetworkSupervisor" </param>
            <param name="key"> 键名，如：@"RegisterCode" </param>
            <param name="value"> 键值，如：@"123455" </param>
            <returns> </returns>
        </member>
        <member name="M:Sayaka.Common.ProviderRegedit.GetKeyValue(System.String,System.String)">
            <summary>
              获取键值，不存在则返回null
            </summary>
            <param name="item"> 注册表项目，如：@"NetworkSupervisor" </param>
            <param name="key"> 键名，如：@"RegisterCode" </param>
            <returns> </returns>
        </member>
        <member name="T:Sayaka.Common.ProviderScreenCapture">
            <summary>   
            提供全屏和指定窗口的截图 以及保存为文件的类   
            </summary>   
        </member>
        <member name="M:Sayaka.Common.ProviderScreenCapture.CaptureScreen">
            <summary>   
            全屏截图    
            </summary>   
            <returns></returns>   
        </member>
        <member name="M:Sayaka.Common.ProviderScreenCapture.CaptureWindow(System.IntPtr)">
            <summary>   
            指定窗口截图   
            </summary>   
            <param name="handle">窗口句柄. (在windows应用程序中, 从Handle属性获得)</param>   
            <returns></returns>   
        </member>
        <member name="M:Sayaka.Common.ProviderScreenCapture.CaptureWindowToFile(System.IntPtr,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>   
            指定窗口截图 保存为图片文件   
            </summary>   
            <param name="handle"></param>   
            <param name="filename"></param>   
            <param name="format"></param>   
        </member>
        <member name="M:Sayaka.Common.ProviderScreenCapture.CaptureScreenToFile(System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>   
            全屏截图 保存为文件   
            </summary>   
            <param name="filename"></param>   
            <param name="format"></param>   
        </member>
        <member name="T:Sayaka.Common.ProviderScreenCapture.GDI32">
            <summary>   
            辅助类 定义 Gdi32 API 函数   
            </summary>   
        </member>
        <member name="T:Sayaka.Common.ProviderScreenCapture.User32">
            <summary>   
            辅助类 定义User32 API函数   
            </summary>   
        </member>
        <member name="M:Sayaka.Common.ProviderScreenCapture.CopyScreen(System.Drawing.Rectangle)">
            <summary>
            屏幕截图
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderShotcut">
            <summary>
            快捷方式静态操作类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderShotcut.CreateShortcut(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            创建快捷方式。
            </summary>
            <param name="shortcutPath">快捷方式路径</param>
            <param name="targetPath">目标路径</param>
            <param name="workingDirectory">工作路径</param>
            <param name="description">快捷方式描述</param>
            <param name="iconLocation">快捷方式图标路径</param>
            <param name="iconIndex">快捷方式图标序号</param>
        </member>
        <member name="M:Sayaka.Common.ProviderShotcut.AddFavorites(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            添加网址收藏
            </summary>
            <param name="url">网址</param>
            <param name="description">快捷方式摸索</param>
            <param name="folderName">收藏夹中子菜单名称，为空则不创建子菜单</param>
            <param name="iconLocation">快捷方式图标路径</param>
            <param name="iconIndex">快捷方式图标序号</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderShotcut.CreateDesktopShortcut(System.String,System.String,System.String,System.Int32)">
            <summary>
            创建桌面快捷方式
            </summary>
            <param name="targetPath">目标路径</param>
            <param name="description">快捷方式名称</param>
            <param name="iconLocation">快捷方式图标路径</param>
            <param name="iconIndex">快捷方式图标序号</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderShotcut.CreateProgramsShortcut(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            创建程序菜单快捷方式
            </summary>
            <param name="targetPath">可执行文件路径</param>
            <param name="description">快捷方式名称</param>
            <param name="menuName">程序菜单中子菜单名称，为空则不创建子菜单</param>
            <param name="iconLocation">快捷方式图标路径</param>
            <param name="iconIndex">快捷方式图标序号，默认为0</param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderSimulateInput">
            <summary>
            模拟键盘鼠标输入
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.keybd_event(System.Byte,System.Byte,System.Int32,System.Int32)">
            <summary>
            键盘操作
            </summary>
            <param name="bVk">虚拟键值</param>
            <param name="bScan">扫描码，一般为0</param>
            <param name="dwFlags">按键类别,0为按下，2为释放</param>
            <param name="dwExtraInfo">一般为0</param>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.FindWindow(System.String,System.String)">
            <summary>
            通过窗口类名、窗口名称查找窗口句柄
            </summary>
            <param name="lpClassName">为null不使用</param>
            <param name="lpWindowName">为null不使用</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.GetWindowRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
            获取窗口位置
            </summary>
            <param name="hwnd"></param>
            <param name="lpRect"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.GetWindowRect(System.String,System.String)">
            <summary>
            通过窗口类名、窗口名称获取窗口属性
            </summary>
            <param name="lpClassName">窗口类名，为null不使用</param>
            <param name="lpWindowName">窗口名称，为null不使用</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.SetCursorPos(System.Int32,System.Int32)">
            <summary>
            设置光标位置
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.GetCursorPos(System.Drawing.Point@)">
            <summary>
            获取光标位置
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.mouse_event(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            模拟鼠标
            </summary>
            <param name="dwFlags">标志位集，指定点击按钮和鼠标动作的多种情况</param>
            <param name="dx">根据MOUSEEVENTF_ABSOLUTE，沿X轴移动到绝对位置还是移动相对位置，正向右，负向左</param>
            <param name="dy">根据MOUSEEVENTF_ABSOLUTE，沿Y轴移动到绝对位置还是移动相对位置，下向下，负向上</param>
            <param name="dwData">根据MOUSEEVENTF_WHEEL，鼠标滚轮移动的数量，正向前，负向后</param>
            <param name="dwExtraInfo">附加32位值，应用程序调用函数GetMessageExtraInfo来获得此附加信息</param>
            <returns></returns>
        </member>
        <member name="F:Sayaka.Common.ProviderSimulateInput.SystemMetricsFlag.SM_CXSCREEN">
            <summary>
            屏幕宽度
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderSimulateInput.SystemMetricsFlag.SM_CYSCREEN">
            <summary>
            屏幕高度
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.MouseMove(System.Int32,System.Int32,System.Boolean)">
            <summary>
            移动鼠标
            </summary>
            <param name="dx">根据absolute，沿X轴移动到绝对位置还是移动相对位置，正向右，负向左</param>
            <param name="dy">根据absolute，沿Y轴移动到绝对位置还是移动相对位置，正向下，负向上</param>
            <param name="absolute">绝对位置或相对位置</param>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.MouseLeftClick">
            <summary>
            左键点击
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.MouseRightClick">
            <summary>
            右键点击
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.MouseMiddleClick">
            <summary>
            中键点击
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.MouseWheelScroll(System.Int32)">
            <summary>
            滚动滚轮
            </summary>
            <param name="dwData"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.VkKeyScan(System.Char)">
            <summary>
            查找字符对应的虚拟键值，低8位为虚拟键值，高8位为按钮状态
            高8位为按钮状态对应：0x01按住Shift，0x02按住Ctrl，0x04按住Alt
            </summary>
            <param name="ch">字符</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.GetKeyState(System.Windows.Forms.Keys)">
            <summary>
            获取Keys.Capital、Keys.NumLock、Keys.Scroll状态
            </summary>
            <param name="key">虚拟键值：Keys.Capital、Keys.NumLock、Keys.Scroll</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.SetKeyState(System.Windows.Forms.Keys,System.Boolean)">
            <summary>
            设置Keys.Capital、Keys.NumLock、Keys.Scroll状态
            </summary>
            <param name="key">虚拟键值：Keys.Capital、Keys.NumLock、Keys.Scroll</param>
            <param name="state">状态：true为启用</param>
        </member>
        <member name="P:Sayaka.Common.ProviderSimulateInput.CapsLock">
            <summary>
            CapsLock状态
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderSimulateInput.NumLock">
            <summary>
            NumLock状态
            </summary>
        </member>
        <member name="P:Sayaka.Common.ProviderSimulateInput.ScrollLock">
            <summary>
            ScrollLock状态
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.KeyboardInput(System.Windows.Forms.Keys,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            模拟键盘执行虚拟键值
            </summary>
            <param name="key"></param>
            <param name="shift"></param>
            <param name="ctrl"></param>
            <param name="alt"></param>
            <param name="win"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.KeyboardInput(System.Byte,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            模拟键盘执行虚拟键值
            </summary>
            <param name="keyCode"></param>
            <param name="shift"></param>
            <param name="ctrl"></param>
            <param name="alt"></param>
            <param name="win"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.KeyboardInput(System.Char)">
            <summary>
            模拟键盘输入字符
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.KeyboardInputPaste(System.String)">
            <summary>
            模拟键盘Ctrl+V粘贴字符串
            </summary>
            <param name="str">字符串</param>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.KeyboardInputSelectAll">
            <summary>
            模拟键盘Ctrl+A全选字符串
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.KeyboardInputCopy">
            <summary>
            模拟键盘Ctrl+C复制字符串
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderSimulateInput.KeyboardInputPaste(System.Char)">
            <summary>
            模拟键盘Ctrl+V粘贴字符
            </summary>
        </member>
        <member name="T:Sayaka.Common.ProviderSound">
            <summary>
                声音播放类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderSound.Play(System.String,System.Int32,System.Int32)">
            <summary>
                播放声音
            </summary>
            <param name="filename">声音文件，如C:\\123.WAV</param>
            <param name="times">播放次数，大于0</param>
            <param name="interval">播放间隔，单位毫秒</param>
        </member>
        <member name="M:Sayaka.Common.ProviderSound.Play(System.IO.UnmanagedMemoryStream,System.Int32,System.Int32)">
            <summary>
                播放声音
            </summary>
            <param name="filename">资源里的声音文件，如Properties.Resources.msg</param>
            <param name="times">播放次数，大于0</param>
            <param name="interval">播放间隔，单位毫秒</param>
        </member>
        <member name="T:Sayaka.Common.ProviderSqlServer">
            <summary>
            SqlServer操作类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderSqlServer.ExecuteNonQuery(System.String,System.String)">
            <summary>
            执行SQL语句并返回影响的行数
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="sql">SQl语句</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Sayaka.Common.ProviderSqlServer.ExecuteReader(System.String,System.String)">
            <summary>
            执行SQL语句并返回System.Data.SqlClient.SqlDataReader对象
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="sql">SQl语句</param>
            <returns>返回System.Data.SqlClient.SqlDataReader对象</returns>
        </member>
        <member name="M:Sayaka.Common.ProviderSqlServer.ExecuteScalar(System.String,System.String)">
            <summary>
            执行SQL语句并返回数据集第一行第一列
            </summary>
            <param name="connectionString">连接字符串</param>
            <param name="sql">SQL语句</param>
            <returns>返回数据集第一行第一列</returns>
        </member>
        <member name="T:Sayaka.Common.ProviderString">
            <summary>
                字符串静态操作类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExHexStringToDecimalStringByValue(System.String)">
            <summary>
                十六进制字符串转十进制字符串，按值转换，如F6转换为246
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExHexStringToDecimalStringByBit(System.String)">
            <summary>
                十六进制字符串转十进制字符串，逐位转换，1位十六进制值对应2位十进制值，如F6转换为1506
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExUnicodeEncode(System.String)">
            <summary>
                Unicode编码，\uxxx Unicode编码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExUnicodeDecode(System.String)">
            <summary>
                Unicode解码，\uxxx Unicode解码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExBytesToHexString(System.Byte[])">
            <summary>
                字节数组转十六进制字符串
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExHexStringToBytes(System.String)">
            <summary>
                十六进制字符串转字节数组
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExDesEncrypt(System.String,System.String)">
            <summary>
                DES加密
            </summary>
            <param name="encryptString"></param>
            <param name="encryptKey">8位密钥</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExDesDecrypt(System.String,System.String)">
            <summary>
                DES解密
            </summary>
            <param name="decryptString"></param>
            <param name="decryptKey">8位密钥</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExMd5Encrypt(System.String)">
            <summary>
                Md5加密
            </summary>
            <param name="theString"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExBase64Encode(System.String)">
            <summary>
                Base64加密，采用utf8编码方式加密
            </summary>
            <param name="source">待加密的明文</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExBase64Encode(System.String,System.Text.Encoding)">
            <summary>
                Base64加密
            </summary>
            <param name="encodeType">加密采用的编码方式</param>
            <param name="source">待加密的明文</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExBase64Decode(System.String)">
            <summary>
                Base64解密，采用utf8编码方式解密
            </summary>
            <param name="result">待解密的密文</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExBase64Decode(System.String,System.Text.Encoding)">
            <summary>
                Base64解密
            </summary>
            <param name="encodeType">解密采用的编码方式，注意和加密时采用的方式一致</param>
            <param name="result">待解密的密文</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExHtmlDecode(System.String)">
            <summary>
                将已经为 HTTP 传输进行过 HTML 编码的字符串转换为已解码的字符串。
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExHtmlEncode(System.String)">
            <summary>
                将字符串转换为 HTML 编码字符串。
            </summary>
            <param name="theString"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExRemoveHtmlTag(System.String)">
            <summary>
                移除Html标签
            </summary>
            <param name="htmlCode"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExUrlEncode(System.String,System.Text.Encoding)">
            <summary>
                URL编码
            </summary>
            <param name="url"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExUrlDecode(System.String,System.Text.Encoding)">
            <summary>
                URL解码
            </summary>
            <param name="url"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExCalcDecimalLength(System.String[])">
            <summary>
                计算小数点位数
            </summary>
            <param name="textList"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExCalcDecimalLength(System.String)">
            <summary>
                计算小数点位数
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExCreateLinkString(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                把数组所有元素排序，并按照“参数=参数值”的模式用"&amp;"字符拼接成字符串，如a=1&amp;b=2
            </summary>
            <param name="paras"> 需要排序并参与字符拼接的参数组</param>
            <returns>拼接后字符串</returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExUrlEncode(System.String,System.Boolean,System.Char[])">
            <summary>
                UrlEncode默认为大写
            </summary>
            <param name="str">输入字符串</param>
            <param name="upper">大小写选择，大写为%3D，小写为%3d</param>
            <param name="except">例外，默认/为例外</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExIsNullOrEmpty(System.String)">
            <summary>
                字符串是否为空或null
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExIsNullOrWhiteSpace(System.String)">
            <summary>
                字符串是否空、null或空字符串
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExIsNotNullOrEmpty(System.String)">
            <summary>
                字符串是否不为空或null
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExIsNotNullOrWhiteSpace(System.String)">
            <summary>
                字符串是否不为空、null或空字符串
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExGetBytes(System.String,System.Text.Encoding)">
            <summary>
                封装System.Text.Encoding.UTF8.GetBytes(str)
            </summary>
            <param name="str"></param>
            <param name="encoding">默认为Encoding.UTF8</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExGetString(System.Byte[],System.Text.Encoding)">
            <summary>
                封装System.Text.Encoding.UTF8.GetString(bytes)
            </summary>
            <param name="bytes"></param>
            <param name="encoding">默认为Encoding.UTF8</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExReplaceInvalidFileNameChars(System.String,System.String)">
            <summary>
                替换文件名中无效的字符为指定的字符
            </summary>
            <param name="fileName"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExReplaceInvalidFileNameCharsWithSimilarChars(System.String)">
            <summary>
                替换文件名中无效的字符为相似的字符
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExToInt16(System.String)">
            <summary>
                Convert.ToInt16扩展方法
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExToInt32(System.String)">
            <summary>
                Convert.ToInt32扩展方法
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExToInt64(System.String)">
            <summary>
                Convert.ToInt64扩展方法
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExToUInt16(System.String)">
            <summary>
                Convert.ToUInt16扩展方法
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExToUInt32(System.String)">
            <summary>
                Convert.ToUInt32扩展方法
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ExToUInt64(System.String)">
            <summary>
                Convert.ToUInt64扩展方法
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ToShort(System.String)">
            <summary>
                Convert.ToInt16扩展方法
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ToInt(System.String)">
            <summary>
                Convert.ToInt32扩展方法
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ToLong(System.String)">
            <summary>
                Convert.ToInt64扩展方法
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ToUshort(System.String)">
            <summary>
                Convert.ToUInt16扩展方法
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ToUint(System.String)">
            <summary>
                Convert.ToUInt32扩展方法
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ToUlong(System.String)">
            <summary>
                Convert.ToUInt64扩展方法
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ToDecimal(System.String)">
            <summary>
                Convert.ToDecimal
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ToBoolean(System.String)">
            <summary>
                Convert.ToBoolean
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.IsEmpty(System.String)">
            <summary>
                字符串为null或者空值
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.IsNotEmpty(System.String)">
            <summary>
                字符串不为null或者空值
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.IsBlank(System.String)">
            <summary>
                字符串为null或者空值或者空白字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.IsNotBlank(System.String)">
            <summary>
                字符串不为null或者空值或者空白字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ToLiteralText(System.String)">
            <summary>
                将C＃字符串值转换为转义的字符串文字，头尾自动加双引号
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.ToTitleCase(System.String)">
            <summary>
                将指定字符串转换为标题大写（全部大写的字符串不转换）
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.Unicode2Character(System.String)">
            <summary>
                将Unicode转找为Character,\uxxxx转为字符串
            </summary>
            <param name="str">原字符串</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.Hex2Dec(System.String)">
            <summary>
                十六进制转十进制，根据值转换，如F6转换为246
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.Hex2Dec2(System.String)">
            <summary>
                十六进制转十进制，逐位转换，1位十六进制值对应2位十进制值，如F6转换为1506
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.EnUnicode(System.String)">
            <summary>
                Unicode编码，\uxxx Unicode编码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.DeUnicode(System.String)">
            <summary>
                Unicode解码，\uxxx Unicode解码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.BytesToHexString(System.Byte[])">
            <summary>
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.IsNullOrEmpty(System.String)">
            <summary>
                字符串是否为空或null
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.IsNullOrWhiteSpace(System.String)">
            <summary>
                字符串是否空、null或空字符串
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.GetBytes(System.String,System.Text.Encoding)">
            <summary>
                封装System.Text.Encoding.UTF8.GetBytes(str)
            </summary>
            <param name="str"></param>
            <param name="encoding">默认为Encoding.UTF8</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderString.GetString(System.Byte[],System.Text.Encoding)">
            <summary>
                封装System.Text.Encoding.UTF8.GetString(bytes)
            </summary>
            <param name="bytes"></param>
            <param name="encoding">默认为Encoding.UTF8</param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderSystemTime">
            <summary>
            系统时间静态操作类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderSystemTime.SetSystemTime(System.DateTime)">
            <summary>
            设置系统时间
            </summary>
            <param name="datetime"></param>
        </member>
        <member name="T:Sayaka.Common.ProviderTrace">
            <summary>
                Trace静态操作类，默认在输出窗口显示，如果要保存到文件，在Form_Load加入如下代码：
                Trace.Listeners.Clear();
                Trace.Listeners.Add(new TextWriterTraceListener("log.log"));
                Trace.Listeners.Add(new ConsoleTraceListener());
                Trace.AutoFlush = true;
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderTrace.AddPrefixString(System.String)">
            <summary>
                添加前缀字符串，"yyyy-mm-dd HH:mm:ss 完整函数名 -> "
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderTrace.TraceWriteLine(System.Object)">
            <summary>
                调用Trace.WriteLine，自动加入时间和函数信息前缀
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderTrace.TraceInformation(System.Object)">
            <summary>
                调用Trace.WriteLine，自动加入时间、INFORMATION和函数信息前缀
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderTrace.TraceWarning(System.Object)">
            <summary>
                调用Trace.WriteLine，自动加入时间、WARNING和函数信息前缀
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderTrace.TraceError(System.Object)">
            <summary>
                调用Trace.WriteLine，自动加入时间、ERROR和函数信息前缀
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderTrace.WriteLine(System.Object)">
            <summary>
                调用Console.WriteLine，自动加入时间和函数信息前缀
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderTrace.WriteLineJson(System.Object)">
            <summary>
                调用Console.WriteLine，自动加入时间和函数信息前缀，将对象转为JSON文本
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderTrace.WriteMethodStart">
            <summary>
                输出函数启动信息，调用Console.WriteLine，自动加入时间、START和函数信息前缀
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderTrace.WriteMethodEnd">
            <summary>
                输出函数结束信息，调用Console.WriteLine，自动加入时间、END和函数信息前缀
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderTrace.GetMethodName(System.Int32)">
            <summary>
                获取函数完整名称，0为当前函数（返回Sayaka.Common.ProviderTrace.GetMethodName）
            </summary>
            <param name="index">堆栈索引：0为当前函数（返回Sayaka.Common.ProviderTrace.GetMethodName），1为父级函数，2为爷级函数...</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderTrace.WriteStartMethod">
            <summary>
                输出函数启动信息，调用Console.WriteLine，自动加入时间、START和函数信息前缀
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderTrace.WriteEndMethod">
            <summary>
                输出函数结束信息，调用Console.WriteLine，自动加入时间、END和函数信息前缀
            </summary>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderUrl">
            <summary>The url helper.</summary>
        </member>
        <member name="M:Sayaka.Common.ProviderUrl.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
                URL编码
            </summary>
            <param name="url"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderUrl.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
                URL解码
            </summary>
            <param name="url"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderUrl.GetAbsoluteUrl(System.String,System.String)">
            <summary>
                将相对URL转换为绝对URL
            </summary>
            <param name="baseUrl">基URL，以http://开头</param>
            <param name="relativeUrl">相对的URL</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderUrl.GetHost(System.String)">
            <summary>
                获取Host，如：www.baidu.com
            </summary>
            <param name="url">基URL，以http://开头</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderUrl.GetQueryString(System.String)">
            <summary>
                将查询字符串解析转换为名值集合。
            </summary>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderUrl.GetQueryString(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
                将查询字符串解析转换为名值集合.
            </summary>
            <param name="queryString"></param>
            <param name="encoding"></param>
            <param name="isEncoded"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderUrl.DictionaryToQueryString(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                DictionaryToQueryString，QueryString格式：a=1&amp;b=2
            </summary>
            <param name="dictionary"></param>
            <param name="separator"></param>
            <param name="connString"></param>
            <param name="urlEncodeUpper"></param>
            <param name="orderByKey"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderUrl.DictionaryToQueryString(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                DictionaryToQueryString，QueryString格式：a=1&amp;b=2
            </summary>
            <param name="dictionary"></param>
            <param name="separator"></param>
            <param name="connString"></param>
            <param name="urlEncodeUpper"></param>
            <param name="orderByKey"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderUrl.QueryStringToDictionaryObject(System.String,System.String,System.String)">
            <summary>
                返回Dictionary&lt;string, object&gt;，QueryString格式：a=1&amp;b=2
            </summary>
            <param name="queryString"></param>
            <param name="separator"></param>
            <param name="connString"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderUrl.QueryStringToDictionaryString(System.String,System.String,System.String)">
            <summary>
                返回Dictionary&lt;string, string&gt;，QueryString格式：a=1&amp;b=2
            </summary>
            <param name="queryString"></param>
            <param name="separator"></param>
            <param name="connString"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderUrl.JsonStringToQueryString(System.String)">
            <summary>
                JsonStringToQueryString，QueryString格式：a=1&amp;b=2
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderUrl.QueryStringToJsonString(System.String)">
            <summary>
                QueryStringToJsonString，QueryString格式：a=1&amp;b=2
            </summary>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderUrl.CastToDictionaryString(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
                转换为Dictionary&lt;string, string&gt;
            </summary>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderUrl.CastToDictionaryObject(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                转换为Dictionary&lt;string, object&gt;
            </summary>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderWindowApi">
            <summary>
                WindowApi封装
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.Click(System.IntPtr)">
            <summary>
                点击
            </summary>
            <param name="hWnd"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.Click(System.IntPtr,System.Int32,System.Int32)">
            <summary>
                点击窗口（控件）工作区域内(X,Y)位置，工作区域左上角为(0,0)
            </summary>
            <param name="hWnd"></param>
            <param name="x">横坐标，左上角为0，向右为正</param>
            <param name="y">纵坐标，左上角为0，向下为正</param>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.KeyDown(System.IntPtr,System.Windows.Forms.Keys)">
            <summary>
                键盘按下
            </summary>
            <param name="hWnd"></param>
            <param name="key"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.KeyUp(System.IntPtr,System.Windows.Forms.Keys)">
            <summary>
                键盘弹起
            </summary>
            <param name="hWnd"></param>
            <param name="key"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.KeyPress(System.IntPtr,System.Windows.Forms.Keys)">
            <summary>
                键盘按下再弹起
            </summary>
            <param name="hWnd"></param>
            <param name="key"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.GetWindowText(System.IntPtr)">
            <summary>
                获取标题
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.GetClassName(System.IntPtr)">
            <summary>
                获取类名
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.GetProcessName(System.IntPtr)">
            <summary>
                获取进程名称
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.GetProcessId(System.IntPtr)">
            <summary>
                获取PID
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.GetParent(System.IntPtr)">
            <summary>
                获取父控件句柄
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.GetWindowThreadProcessId(System.IntPtr,System.Int32@)">
            <summary>
                获取PID
            </summary>
            <param name="hWnd"></param>
            <param name="dwProcessId"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.GetWindowTextW(System.IntPtr,System.Text.StringBuilder,System.UInt32)">
            <summary>
                获取标题
            </summary>
            <param name="hWnd"></param>
            <param name="lpString"></param>
            <param name="nMaxCount"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.GetClassNameW(System.IntPtr,System.Text.StringBuilder,System.UInt32)">
            <summary>
                获取类名
            </summary>
            <param name="hWnd"></param>
            <param name="lpString"></param>
            <param name="nMaxCount"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.GetComboBoxInfo(System.IntPtr)">
            <summary>
                获取ComboBox控件信息
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.ProviderWindowApi.COMBOBOXINFO">
            <summary>
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.COMBOBOXINFO.cbSize">
            <summary>
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.COMBOBOXINFO.rcItem">
            <summary>
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.COMBOBOXINFO.rcButton">
            <summary>
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.COMBOBOXINFO.stateButton">
            <summary>
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.COMBOBOXINFO.hwndCombo">
            <summary>
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.COMBOBOXINFO.hwndItem">
            <summary>
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.COMBOBOXINFO.hwndList">
            <summary>
            </summary>
        </member>
        <member name="T:Sayaka.Common.ProviderWindowApi.RECT">
            <summary>
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.RECT.left">
            <summary>
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.RECT.top">
            <summary>
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.RECT.right">
            <summary>
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.RECT.bottom">
            <summary>
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.GetProgressControlPosition(System.IntPtr)">
            <summary>
                获取进度条控件位置
            </summary>
            <param name="progressWnd">进度条控件句柄</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.GetCursorPos">
            <summary>
                获取鼠标所在位置
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.GetWindowRect(System.IntPtr)">
            <summary>
                获取窗口尺寸
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.GetClientRect(System.IntPtr)">
            <summary>
                获取工作区尺寸
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.ClientToScreen(System.IntPtr,System.Drawing.Point)">
            <summary>
                工作区位置转屏幕位置
            </summary>
            <param name="hWnd"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.ScreenToClient(System.IntPtr,System.Drawing.Point)">
            <summary>
                屏幕位置转工作区位置
            </summary>
            <param name="hWnd"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.SetCursorPos(System.Int32,System.Int32)">
            <summary>
                设置鼠标位置
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.GetCursorPos(System.Drawing.Point@)">
            <summary>
                获取鼠标位置
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.WindowFromPoint(System.Drawing.Point)">
            <summary>
                从鼠标位置获取窗口句柄
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.ChildWindowFromPoint(System.IntPtr,System.Drawing.Point)">
            <summary>
                从鼠标位置获取子控件句柄
            </summary>
            <param name="hWndParent"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.GetWindowRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
                获取窗口尺寸
            </summary>
            <param name="hWnd"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.GetClientRect(System.IntPtr,System.Drawing.Rectangle@)">
            <summary>
                获取工作区尺寸
            </summary>
            <param name="hWnd"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.ClientToScreen(System.IntPtr,System.Drawing.Point@)">
            <summary>
                工作区位置转屏幕位置
            </summary>
            <param name="hWnd"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.ScreenToClient(System.IntPtr,System.Drawing.Point@)">
            <summary>
                屏幕位置转工作区位置
            </summary>
            <param name="hWnd"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.SetForegroundWindow(System.IntPtr)">
            <summary>
                窗口置顶
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.SetWindowPos(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
                设置窗口属性
            </summary>
            <param name="hWnd">窗口句柄</param>
            <param name="hWndInsertAfter">窗口的Z顺序</param>
            <param name="x">横坐标</param>
            <param name="y">纵坐标</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="flags">选项</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.SetWindowPos(System.IntPtr,Sayaka.Common.SetWindowPosWndInsertAfterFlags,System.Int32,System.Int32,System.Int32,System.Int32,Sayaka.Common.SetWindowPosFlags)">
            <summary>
                设置窗口属性
            </summary>
            <param name="hWnd">窗口句柄</param>
            <param name="hWndInsertAfter">窗口的Z顺序</param>
            <param name="x">横坐标</param>
            <param name="y">纵坐标</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="flags">选项，使用“|”多选</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.SetForegroundWindowBySetWindowPos(System.IntPtr)">
            <summary>
                窗口置顶，使用SetWindowPos
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.SetWindowText(System.IntPtr,System.String)">
            <summary>
                设置标题
            </summary>
            <param name="hWnd"></param>
            <param name="text"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.EnableWindow(System.IntPtr,System.Boolean)">
            <summary>
                启用控件
            </summary>
            <param name="hWnd"></param>
            <param name="enabled"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.UpdateWindow(System.IntPtr)">
            <summary>
                更新控件
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.SetParent(System.IntPtr,System.IntPtr)">
            <summary>
                设置父控件句柄
            </summary>
            <param name="hWndParent"></param>
            <param name="hWndChild"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.Close(System.IntPtr)">
            <summary>
                关闭窗口，相当于点击窗口右上角的“X”按钮
            </summary>
            <param name="hWnd"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.Close(System.Int32)">
            <summary>
                关闭窗口，相当于点击窗口右上角的“X”按钮
            </summary>
            <param name="processId"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.Close(System.String)">
            <summary>
                关闭窗口，相当于点击窗口右上角的“X”按钮
            </summary>
            <param name="processName"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.Kill(System.IntPtr)">
            <summary>
                根据进程句柄，强制关闭单个进程
            </summary>
            <param name="hWnd"></param>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.Kill(System.Int32)">
            <summary>
                根据PID，强制关闭单个进程
            </summary>
            <param name="processId"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.Kill(System.String)">
            <summary>
                通过进程名称，强制关闭多个进程
            </summary>
            <param name="processName">进程名称，不包含末尾的".exe"</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.FindWindow(System.Drawing.Point)">
            <summary>
                通过坐标位置查找窗口，返回第一个窗口句柄
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.FindWindow(System.String[],System.String[])">
            <summary>
                通过类名和标题，模糊查找窗口，返回第一个窗口句柄，找不到则返回IntPtr.Zero
            </summary>
            <param name="classNameFilters">null值不启用，类名过滤字符串数组，类名必须包含数组里全部字符串</param>
            <param name="windowTextFilters">null值不启用，标题过滤字符串数组，标题必须包含数组里全部字符串</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.FindAllWindows">
            <summary>
                获取所有根窗口句柄
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.FindAllChildWindows(System.IntPtr)">
            <summary>
                获取所有子控件句柄
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.FindWindow(System.String,System.String)">
            <summary>
                查找窗口句柄
            </summary>
            <param name="className">类名，不需要则使用NULL</param>
            <param name="windowText">标题，不需要则使用NULL</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.FindWindowEx(System.IntPtr,System.IntPtr,System.String,System.String)">
            <summary>
                查找子控件句柄
            </summary>
            <param name="hWndParent"></param>
            <param name="hWndChildAfter">子窗口句柄，查找下一个窗口，默认使用NULL或IntPtr.Zero</param>
            <param name="className">类名，不需要则使用NULL</param>
            <param name="windowText">标题，不需要则使用NULL</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.EnumWindows(Sayaka.Common.ProviderWindowApi.EnumProc,System.Int32)">
            <summary>
                遍历根窗口句柄
            </summary>
            <param name="enumProc"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.EnumChildWindows(System.IntPtr,Sayaka.Common.ProviderWindowApi.EnumProc,System.Int32)">
            <summary>
                遍历子控件句柄
            </summary>
            <param name="hWndParent"></param>
            <param name="lpEnumFunc"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.PostMessage(System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                发送消息，异步执行，不等待返回
            </summary>
            <param name="hWnd"></param>
            <param name="wMsg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.PostMessage(System.IntPtr,System.UInt32,System.UInt32,System.Text.StringBuilder)">
            <summary>
                发送消息，异步执行，不等待返回
            </summary>
            <param name="hWnd"></param>
            <param name="wMsg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.PostMessage(System.IntPtr,System.UInt32,System.Text.StringBuilder,System.UInt32)">
            <summary>
                发送消息，异步执行，不等待返回
            </summary>
            <param name="hWnd"></param>
            <param name="wMsg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.PostMessage(System.IntPtr,System.UInt32,System.UInt32,System.String)">
            <summary>
                发送消息，异步执行，不等待返回
            </summary>
            <param name="hWnd"></param>
            <param name="wMsg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.SendMessage(System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
                发送消息，同步执行，等待返回
            </summary>
            <param name="hWnd"></param>
            <param name="wMsg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.SendMessage(System.IntPtr,System.UInt32,System.UInt32,System.Text.StringBuilder)">
            <summary>
                发送消息，同步执行，等待返回
            </summary>
            <param name="hWnd"></param>
            <param name="wMsg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.SendMessage(System.IntPtr,System.UInt32,System.Text.StringBuilder,System.UInt32)">
            <summary>
                发送消息，同步执行，等待返回
            </summary>
            <param name="hWnd"></param>
            <param name="wMsg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderWindowApi.SendMessage(System.IntPtr,System.UInt32,System.UInt32,System.String)">
            <summary>
                发送消息，同步执行，等待返回
            </summary>
            <param name="hWnd"></param>
            <param name="wMsg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.WM_KEYDOWN">
            <summary>
                键盘按下
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.WM_KEYUP">
            <summary>
                键盘放开
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.WM_SETTEXT">
            <summary>
                设置文本
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.WM_GETTEXT">
            <summary>
                获取文本
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.WM_CLOSE">
            <summary>
                关闭窗口
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.WM_DESTROY">
            <summary>
                窗口Destroy
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.WM_QUIT">
            <summary>
                窗口Quit
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.BM_CLICK">
            <summary>
                鼠标点击
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.WM_MOUSEMOVE">
            <summary>
                鼠标移动
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.WM_LBUTTONDOWN">
            <summary>
                按下鼠标左键
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.WM_LBUTTONUP">
            <summary>
                释放鼠标左键
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.WM_LBUTTONDBLCLK">
            <summary>
                双击鼠标左键
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.WM_RBUTTONDOWN">
            <summary>
                按下鼠标右键
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.WM_RBUTTONUP">
            <summary>
                释放鼠标右键
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.WM_RBUTTONDBLCLK">
            <summary>
                双击鼠标右键
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.WM_MBUTTONDOWN">
            <summary>
                按下鼠标中键
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.WM_MBUTTONUP">
            <summary>
                释放鼠标中键
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.WM_MBUTTONDBLCLK">
            <summary>
                双击鼠标中键
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.WM_MOUSEWHEEL">
            <summary>
                鼠标滚轮转动
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.EM_SETCUEBANNER">
            <summary>
                设置HINT
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.EM_GETCUEBANNER">
            <summary>
                获取HINT
            </summary>
        </member>
        <member name="F:Sayaka.Common.ProviderWindowApi.PBM_GETPOS">
            <summary>
                获取ProgressControlPosition
            </summary>
        </member>
        <member name="T:Sayaka.Common.SendMessageMsgFlags">
            <summary>
            SendMessage的uMsg参数选项
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.WM_KEYDOWN">
            <summary>
                键盘按下
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.WM_KEYUP">
            <summary>
                键盘放开
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.WM_SETTEXT">
            <summary>
                设置文本
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.WM_GETTEXT">
            <summary>
                获取文本
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.WM_CLOSE">
            <summary>
                关闭窗口
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.WM_DESTROY">
            <summary>
                窗口Destroy
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.WM_QUIT">
            <summary>
                窗口Quit
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.BM_CLICK">
            <summary>
                鼠标点击
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.WM_MOUSEMOVE">
            <summary>
                鼠标移动
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.WM_LBUTTONDOWN">
            <summary>
                按下鼠标左键
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.WM_LBUTTONUP">
            <summary>
                释放鼠标左键
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.WM_LBUTTONDBLCLK">
            <summary>
                双击鼠标左键
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.WM_RBUTTONDOWN">
            <summary>
                按下鼠标右键
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.WM_RBUTTONUP">
            <summary>
                释放鼠标右键
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.WM_RBUTTONDBLCLK">
            <summary>
                双击鼠标右键
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.WM_MBUTTONDOWN">
            <summary>
                按下鼠标中键
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.WM_MBUTTONUP">
            <summary>
                释放鼠标中键
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.WM_MBUTTONDBLCLK">
            <summary>
                双击鼠标中键
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.WM_MOUSEWHEEL">
            <summary>
                鼠标滚轮转动
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.EM_SETCUEBANNER">
            <summary>
                设置HINT
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.EM_GETCUEBANNER">
            <summary>
                获取HINT
            </summary>
        </member>
        <member name="F:Sayaka.Common.SendMessageMsgFlags.PBM_GETPOS">
            <summary>
                获取ProgressControlPosition
            </summary>
        </member>
        <member name="T:Sayaka.Common.SetWindowPosWndInsertAfterFlags">
            <summary>
                SetWindowPos的hWndInsertAfter参数可选值
            </summary>
        </member>
        <member name="F:Sayaka.Common.SetWindowPosWndInsertAfterFlags.HWND_TOP">
            <summary>
                在前面
            </summary>
        </member>
        <member name="F:Sayaka.Common.SetWindowPosWndInsertAfterFlags.HWND_BOTTOM">
            <summary>
                在后面
            </summary>
        </member>
        <member name="F:Sayaka.Common.SetWindowPosWndInsertAfterFlags.HWND_TOPMOST">
            <summary>
                在前面, 位于任何顶部窗口的前面
            </summary>
        </member>
        <member name="F:Sayaka.Common.SetWindowPosWndInsertAfterFlags.HWND_NOTOPMOST">
            <summary>
                在前面, 位于其他顶部窗口的后面
            </summary>
        </member>
        <member name="T:Sayaka.Common.SetWindowPosFlags">
            <summary>
                SetWindowPos的flags参数可选值
            </summary>
        </member>
        <member name="F:Sayaka.Common.SetWindowPosFlags.SWP_NOSIZE">
            <summary>
                忽略 width、height, 保持大小
            </summary>
        </member>
        <member name="F:Sayaka.Common.SetWindowPosFlags.SWP_NOMOVE">
            <summary>
                忽略 x、y, 不改变位置
            </summary>
        </member>
        <member name="F:Sayaka.Common.SetWindowPosFlags.SWP_NOZORDER">
            <summary>
                忽略 hWndInsertAfter, 保持 Z 顺序
            </summary>
        </member>
        <member name="F:Sayaka.Common.SetWindowPosFlags.SWP_NOREDRAW">
            <summary>
                不重绘
            </summary>
        </member>
        <member name="F:Sayaka.Common.SetWindowPosFlags.SWP_NOACTIVATE">
            <summary>
                不激活
            </summary>
        </member>
        <member name="F:Sayaka.Common.SetWindowPosFlags.SWP_FRAMECHANGED">
            <summary>
                强制发送 WM_NCCALCSIZE 消息, 一般只是在改变大小时才发送此消息，同
            </summary>
        </member>
        <member name="F:Sayaka.Common.SetWindowPosFlags.SWP_SHOWWINDOW">
            <summary>
                显示窗口
            </summary>
        </member>
        <member name="F:Sayaka.Common.SetWindowPosFlags.SWP_HIDEWINDOW">
            <summary>
                隐藏窗口
            </summary>
        </member>
        <member name="F:Sayaka.Common.SetWindowPosFlags.SWP_NOCOPYBITS">
            <summary>
                丢弃客户区
            </summary>
        </member>
        <member name="F:Sayaka.Common.SetWindowPosFlags.SWP_NOOWNERZORDER">
            <summary>
                忽略 hWndInsertAfter, 不改变 Z 序列的所有者
            </summary>
        </member>
        <member name="F:Sayaka.Common.SetWindowPosFlags.SWP_NOSENDCHANGING">
            <summary>
                不发出 WM_WINDOWPOSCHANGING 消息
            </summary>
        </member>
        <member name="F:Sayaka.Common.SetWindowPosFlags.SWP_DRAWFRAME">
            <summary>
                画边框，同SWP_FRAMECHANGED
            </summary>
        </member>
        <member name="F:Sayaka.Common.SetWindowPosFlags.SWP_NOREPOSITION">
            <summary>
                同SWP_NOOWNERZORDER
            </summary>
        </member>
        <member name="F:Sayaka.Common.SetWindowPosFlags.SWP_DEFERERASE">
            <summary>
                防止产生 WM_SYNCPAINT 消息
            </summary>
        </member>
        <member name="F:Sayaka.Common.SetWindowPosFlags.SWP_ASYNCWINDOWPOS">
            <summary>
                若调用进程不拥有窗口, 系统会向拥有窗口的线程发出需求
            </summary>
        </member>
        <member name="T:Sayaka.Common.ProviderXmlSerialize">
            <summary>
                XML序列化操作类
            </summary>
        </member>
        <member name="M:Sayaka.Common.ProviderXmlSerialize.XmlSerializeObject``1(``0,System.Text.Encoding)">
            <summary>
                XML序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="encoding">编码，默认为：Encoding.Default</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.ProviderXmlSerialize.XmlDeserializeObject``1(System.String,System.Text.Encoding)">
            <summary>
                XML反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml"></param>
            <param name="encoding">编码，默认为：Encoding.Default</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.Recaptcha2CaptchaHelper.GetRecaptchaV3Token(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="siteKey"></param>
            <param name="siteReferer"></param>
            <param name="siteAction"></param>
            <param name="minScore"></param>
            <param name="damaKey"></param>
            <param name="inviteCode">不需要赋值</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.Recaptcha2CaptchaHelper.GetRecaptchaV3Token(Sayaka.Common.RecaptchaParameter)">
            <summary>
            </summary>
            <param name="parameter">parameter.InviteCode不需要赋值</param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.RecaptchaPressHelper.GetRecaptchaV3Token(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="siteKey"></param>
            <param name="siteReferer"></param>
            <param name="siteAction"></param>
            <param name="minScore">不需要赋值</param>
            <param name="damaKey"></param>
            <param name="inviteCode"></param>
            <returns></returns>
        </member>
        <member name="M:Sayaka.Common.RecaptchaPressHelper.GetRecaptchaV3Token(Sayaka.Common.RecaptchaParameter)">
            <summary>
            
            </summary>
            <param name="parameter">parameter.MinScore不要赋值</param>
            <returns></returns>
        </member>
        <member name="T:Sayaka.Common.UserControls.UserControlLog">
            <summary>
                显示运行日志，调用AddLog函数
            </summary>
        </member>
        <member name="M:Sayaka.Common.UserControls.UserControlLog.#ctor">
            <summary>
                运行日志
            </summary>
        </member>
        <member name="M:Sayaka.Common.UserControls.UserControlLog.AddLog(System.String,System.String,System.String)">
            <summary>
                添加运行日志，保存到文件
            </summary>
            <param name="content">日志内容</param>
            <param name="title">日志标题</param>
            <param name="type">日志类别，创建日志类别文件夹，按天记录日志</param>
        </member>
        <member name="F:Sayaka.Common.UserControls.UserControlLog.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:Sayaka.Common.UserControls.UserControlLog.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:Sayaka.Common.UserControls.UserControlLog.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
    </members>
</doc>
